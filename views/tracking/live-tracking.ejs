<%- include('../partials/header') %>

<!-- Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

<div class="pt-16 min-h-screen bg-gray-50">
    <div class="container mx-auto px-4 py-6">
        <!-- Header -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
            <div class="flex items-center justify-between mb-4">
                <div class="flex items-center">
                    <a href="/bookings/my-bookings" class="text-gray-600 hover:text-primary mr-4">
                        <i class="fas fa-arrow-left text-xl"></i>
                    </a>
                    <div>
                        <h1 class="text-2xl font-bold text-gray-800">
                            <i class="fas fa-map-marker-alt text-primary mr-2"></i>
                            Live Tracking
                        </h1>
                        <p class="text-gray-600 text-sm mt-1">
                            <%= ride.fromLocation %> → <%= ride.toLocation %>
                        </p>
                    </div>
                </div>
                <div class="text-right">
                    <div class="flex items-center space-x-2">
                        <span id="liveStatus" class="px-3 py-1 rounded-full text-sm font-semibold <%= isLive ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800' %>">
                            <i class="fas <%= isLive ? 'fa-circle text-green-500 animate-pulse' : 'fa-circle text-gray-500' %> mr-1"></i>
                            <span id="statusText"><%= isLive ? 'Live' : 'Not Started' %></span>
                        </span>
                    </div>
                </div>
            </div>

            <!-- Ride Info -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 pt-4 border-t">
                <div class="flex items-center">
                    <div class="w-12 h-12 rounded-full bg-gray-200 overflow-hidden mr-3">
                        <img src="<%= ride.rider?.profile?.photo || '/images/default-avatar.png' %>" 
                             alt="<%= ride.rider?.profile?.firstName %>"
                             class="w-full h-full object-cover">
                    </div>
                    <div>
                        <p class="text-sm text-gray-600">Driver</p>
                        <p class="font-semibold text-gray-800">
                            <%= ride.rider?.profile?.firstName %> <%= ride.rider?.profile?.lastName %>
                        </p>
                        <div class="flex items-center text-xs text-yellow-500">
                            <i class="fas fa-star mr-1"></i>
                            <span><%= (ride.rider?.rating?.overall || 0).toFixed(1) %></span>
                        </div>
                    </div>
                </div>

                <% if (ride.vehicle) { %>
                <div class="flex items-center">
                    <i class="fas fa-car text-primary text-2xl mr-3"></i>
                    <div>
                        <p class="text-sm text-gray-600">Vehicle</p>
                        <p class="font-semibold text-gray-800"><%= ride.vehicle.make %> <%= ride.vehicle.model %></p>
                        <p class="text-xs text-gray-600"><%= ride.vehicle.licensePlate %></p>
                    </div>
                </div>
                <% } %>

                <div class="flex items-center">
                    <i class="fas fa-clock text-primary text-2xl mr-3"></i>
                    <div>
                        <p class="text-sm text-gray-600">Departure</p>
                        <p class="font-semibold text-gray-800">
                            <%= new Date(ride.departureTime).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }) %>
                        </p>
                        <p class="text-xs text-gray-600">
                            <%= new Date(ride.departureTime).toLocaleDateString() %>
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Map Container -->
            <div class="lg:col-span-2">
                <div class="bg-white rounded-lg shadow-md overflow-hidden">
                    <div class="p-4 bg-gradient-to-r from-primary to-green-600 text-white">
                        <h3 class="font-semibold flex items-center">
                            <i class="fas fa-route mr-2"></i>
                            Live Location
                        </h3>
                    </div>
                    <div id="map" class="w-full" style="height: 500px;"></div>
                </div>

                <!-- Map Controls -->
                <div class="mt-4 bg-white rounded-lg shadow-md p-4">
                    <div class="flex items-center justify-between">
                        <div class="flex space-x-4">
                            <button id="centerMapBtn" class="px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition">
                                <i class="fas fa-crosshairs mr-2"></i>Center Map
                            </button>
                            <button id="showRouteBtn" class="px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition">
                                <i class="fas fa-route mr-2"></i>Show Full Route
                            </button>
                        </div>
                        <div class="text-sm text-gray-600">
                            <i class="fas fa-clock mr-1"></i>
                            Last update: <span id="lastUpdate"><%= currentLocation ? 'Just now' : 'Not available' %></span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sidebar Info -->
            <div class="space-y-6">
                <!-- Trip Details -->
                <div class="bg-white rounded-lg shadow-md p-6">
                    <h3 class="font-semibold text-gray-800 mb-4 flex items-center">
                        <i class="fas fa-info-circle text-primary mr-2"></i>
                        Trip Details
                    </h3>

                    <div class="space-y-4">
                        <div>
                            <p class="text-sm text-gray-600 mb-1">From</p>
                            <p class="font-semibold text-gray-800 flex items-start">
                                <i class="fas fa-map-marker-alt text-green-600 mr-2 mt-1"></i>
                                <%= ride.fromLocation %>
                            </p>
                        </div>

                        <div>
                            <p class="text-sm text-gray-600 mb-1">To</p>
                            <p class="font-semibold text-gray-800 flex items-start">
                                <i class="fas fa-map-marker-alt text-red-600 mr-2 mt-1"></i>
                                <%= ride.toLocation %>
                            </p>
                        </div>

                        <div class="pt-4 border-t">
                            <p class="text-sm text-gray-600 mb-1">Status</p>
                            <p class="font-semibold text-gray-800 capitalize">
                                <% if (ride.status === 'SCHEDULED') { %>
                                    <span class="text-blue-600"><i class="fas fa-clock mr-1"></i> Scheduled</span>
                                <% } else if (ride.status === 'IN_PROGRESS') { %>
                                    <span class="text-green-600"><i class="fas fa-car mr-1"></i> In Progress</span>
                                <% } else if (ride.status === 'COMPLETED') { %>
                                    <span class="text-gray-600"><i class="fas fa-check-circle mr-1"></i> Completed</span>
                                <% } else { %>
                                    <span class="text-gray-600"><%= ride.status %></span>
                                <% } %>
                            </p>
                        </div>

                        <div id="speedInfo" class="hidden pt-4 border-t">
                            <p class="text-sm text-gray-600 mb-1">Current Speed</p>
                            <p class="font-semibold text-gray-800 text-2xl">
                                <span id="currentSpeed">0</span> <span class="text-sm text-gray-600">km/h</span>
                            </p>
                        </div>

                        <div id="etaInfo" class="hidden pt-4 border-t">
                            <p class="text-sm text-gray-600 mb-1">Estimated Arrival</p>
                            <p class="font-semibold text-gray-800" id="estimatedArrival">Calculating...</p>
                        </div>
                    </div>
                </div>

                <!-- Emergency Contact -->
                <div class="bg-red-50 border-l-4 border-red-500 rounded-lg shadow-md p-6">
                    <h3 class="font-semibold text-red-800 mb-3 flex items-center">
                        <i class="fas fa-exclamation-triangle mr-2"></i>
                        Emergency
                    </h3>
                    <p class="text-sm text-red-700 mb-4">Need help? Contact driver or trigger SOS</p>
                    <div class="space-y-2">
                        <a href="tel:<%= ride.rider?.phone %>" 
                           class="block w-full px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg text-center font-semibold transition">
                            <i class="fas fa-phone mr-2"></i>Call Driver
                        </a>
                        <button id="sosBtn"
                                class="block w-full px-4 py-2 bg-white hover:bg-red-50 text-red-600 border-2 border-red-600 rounded-lg text-center font-semibold transition">
                            <i class="fas fa-ambulance mr-2"></i>Trigger SOS
                        </button>
                    </div>
                </div>

                <!-- Chat -->
                <div class="bg-white rounded-lg shadow-md p-6">
                    <h3 class="font-semibold text-gray-800 mb-3 flex items-center">
                        <i class="fas fa-comments text-primary mr-2"></i>
                        Communication
                    </h3>
                    <a href="/chat/<%= ride._id %>" 
                       class="block w-full px-4 py-2 bg-primary hover:bg-green-700 text-white rounded-lg text-center font-semibold transition">
                        <i class="fas fa-comment-dots mr-2"></i>Open Chat
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Leaflet JS -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<!-- Socket.IO -->
<script src="/socket.io/socket.io.js"></script>

<script>
// Configuration
const bookingId = '<%= booking._id %>';
const rideId = '<%= ride._id %>';
const isPassenger = <%= isPassenger %>;
const isRider = <%= isRider %>;
const currentUserId = '<%= user._id %>';

// Map configuration
const mapConfig = <%- JSON.stringify(mapConfig) %>;
const initialLocation = <%= currentLocation ? JSON.stringify(currentLocation.coordinates) : 'null' %>;
const fromCoords = <%= ride.from?.coordinates ? JSON.stringify(ride.from.coordinates) : 'null' %>;
const toCoords = <%= ride.to?.coordinates ? JSON.stringify(ride.to.coordinates) : 'null' %>;
const rideStatus = '<%= ride.status %>';

console.log('🗺️ [Map Config]', {
    mapConfig,
    initialLocation,
    fromCoords,
    toCoords,
    rideStatus
});

// Initialize map
let map, currentMarker, startMarker, endMarker, routeLine, breadcrumbsLayer;

function initMap() {
    console.log('🗺️ Initializing map...');
    
    // Create map - Note: mapConfig.defaultCenter is already [lat, lng]
    const center = initialLocation 
        ? [initialLocation[1], initialLocation[0]]  // Convert [lng, lat] to [lat, lng]
        : mapConfig.defaultCenter;
    
    console.log('🗺️ Map center:', center);
    
    map = L.map('map').setView(center, mapConfig.defaultZoom);

    // Add tile layer
    L.tileLayer(mapConfig.tileLayer, {
        attribution: mapConfig.attribution,
        maxZoom: 19
    }).addTo(map);

    // Add start marker (fromCoords is [lng, lat] format from GeoJSON)
    if (fromCoords && fromCoords.length === 2) {
        console.log('📍 Adding start marker at:', fromCoords);
        startMarker = L.marker([fromCoords[1], fromCoords[0]], {
            icon: L.icon({
                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            })
        }).addTo(map);
        startMarker.bindPopup('<b>Start:</b> <%= ride.fromLocation %>');
    }

    // Add end marker (toCoords is [lng, lat] format from GeoJSON)
    if (toCoords && toCoords.length === 2) {
        console.log('📍 Adding end marker at:', toCoords);
        endMarker = L.marker([toCoords[1], toCoords[0]], {
            icon: L.icon({
                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            })
        }).addTo(map);
        endMarker.bindPopup('<b>Destination:</b> <%= ride.toLocation %>');
    }

    // Add current location marker if available
    if (initialLocation && initialLocation.length === 2) {
        console.log('📍 Adding current location marker at:', initialLocation);
        updateCurrentLocation({
            latitude: initialLocation[1],
            longitude: initialLocation[0]
        });
    }

    // Initialize breadcrumbs layer
    breadcrumbsLayer = L.layerGroup().addTo(map);

    // Auto-fit map to show all markers
    if (startMarker && endMarker) {
        const bounds = L.latLngBounds([
            startMarker.getLatLng(),
            endMarker.getLatLng()
        ]);
        if (currentMarker) {
            bounds.extend(currentMarker.getLatLng());
        }
        map.fitBounds(bounds, { padding: [50, 50] });
    }

    console.log('✅ Map initialized');
}

// Update current location marker
function updateCurrentLocation(location) {
    const { latitude, longitude, speed } = location;
    
    if (currentMarker) {
        currentMarker.setLatLng([latitude, longitude]);
    } else {
        currentMarker = L.marker([latitude, longitude], {
            icon: L.icon({
                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            })
        }).addTo(map);
    }

    currentMarker.bindPopup(`
        <b>Current Location</b><br>
        Speed: ${speed || 0} km/h<br>
        <small>${new Date().toLocaleTimeString()}</small>
    `);

    // Add to breadcrumbs
    L.circleMarker([latitude, longitude], {
        radius: 3,
        fillColor: '#3B82F6',
        color: '#3B82F6',
        weight: 1,
        opacity: 0.8,
        fillOpacity: 0.6
    }).addTo(breadcrumbsLayer);

    // Update speed display
    if (speed) {
        document.getElementById('speedInfo').classList.remove('hidden');
        document.getElementById('currentSpeed').textContent = Math.round(speed);
    }

    // Update last update time
    document.getElementById('lastUpdate').textContent = 'Just now';
}

// Socket.IO connection
const socket = io();

socket.on('connect', () => {
    console.log('✅ Socket connected');
    
    // Join tracking room
    socket.emit('join-tracking', { bookingId, rideId });
    
    // Mark as live
    document.getElementById('liveStatus').className = 'px-3 py-1 rounded-full text-sm font-semibold bg-green-100 text-green-800';
    document.getElementById('statusText').innerHTML = '<i class="fas fa-circle text-green-500 animate-pulse mr-1"></i>Connected';
});

socket.on('tracking-joined', (data) => {
    console.log('✅ Joined tracking room:', data);
});

socket.on('location-update', (data) => {
    console.log('📍 Location update received:', data);
    
    const { location } = data;
    updateCurrentLocation(location);
    
    // Update status
    document.getElementById('liveStatus').className = 'px-3 py-1 rounded-full text-sm font-semibold bg-green-100 text-green-800';
    document.getElementById('statusText').innerHTML = '<i class="fas fa-circle text-green-500 animate-pulse mr-1"></i>Live';
});

socket.on('disconnect', () => {
    console.log('⚠️ Socket disconnected');
    document.getElementById('liveStatus').className = 'px-3 py-1 rounded-full text-sm font-semibold bg-red-100 text-red-800';
    document.getElementById('statusText').innerHTML = '<i class="fas fa-circle text-red-500 mr-1"></i>Disconnected';
});

// Map controls
document.getElementById('centerMapBtn').addEventListener('click', () => {
    if (currentMarker) {
        map.setView(currentMarker.getLatLng(), 15);
    }
});

document.getElementById('showRouteBtn').addEventListener('click', () => {
    if (startMarker && endMarker) {
        const bounds = L.latLngBounds([
            startMarker.getLatLng(),
            endMarker.getLatLng()
        ]);
        if (currentMarker) {
            bounds.extend(currentMarker.getLatLng());
        }
        map.fitBounds(bounds, { padding: [50, 50] });
    }
});

// SOS button
document.getElementById('sosBtn').addEventListener('click', async () => {
    if (!confirm('Are you sure you want to trigger an emergency SOS alert?')) {
        return;
    }

    try {
        const response = await fetch('/sos/trigger', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                bookingId,
                rideId,
                location: currentMarker ? {
                    coordinates: [
                        currentMarker.getLatLng().lng,
                        currentMarker.getLatLng().lat
                    ]
                } : null
            })
        });

        const data = await response.json();
        
        if (data.success) {
            alert('SOS alert sent! Emergency contacts have been notified.');
        } else {
            alert('Failed to send SOS alert: ' + data.message);
        }
    } catch (error) {
        console.error('Error sending SOS:', error);
        alert('Failed to send SOS alert. Please call emergency services directly.');
    }
});

// Auto-update last update time
setInterval(() => {
    const lastUpdateEl = document.getElementById('lastUpdate');
    if (lastUpdateEl.textContent !== 'Not available' && lastUpdateEl.textContent !== 'Just now') {
        // Could implement relative time here (e.g., "2 minutes ago")
    }
}, 60000); // Update every minute

// Initialize map on page load
document.addEventListener('DOMContentLoaded', () => {
    initMap();
});

// Cleanup on page unload
window.addEventListener('beforeunload', () => {
    socket.emit('leave-tracking', { bookingId, rideId });
    socket.disconnect();
});
</script>

<%- include('../partials/footer') %>
