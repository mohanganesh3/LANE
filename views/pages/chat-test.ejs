<%- include('../partials/header') %>

<div class="pt-20 pb-12 bg-gray-50 min-h-screen">
    <div class="container mx-auto px-4">
        <div class="max-w-6xl mx-auto">
            <!-- Header -->
            <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
                <h1 class="text-3xl font-bold text-gray-900 mb-2">
                    <i class="fas fa-bug text-red-500 mr-3"></i>Chat System Debug
                </h1>
                <p class="text-gray-600">Test and debug chat functionality for all bookings</p>
            </div>

            <!-- User Info -->
            <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
                <h2 class="text-xl font-bold text-gray-900 mb-4">Current User</h2>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                        <p class="text-sm text-gray-500">User ID</p>
                        <p class="font-mono text-sm"><%= user._id %></p>
                    </div>
                    <div>
                        <p class="text-sm text-gray-500">Name</p>
                        <p class="font-semibold"><%= user.name %></p>
                    </div>
                    <div>
                        <p class="text-sm text-gray-500">Email</p>
                        <p class="text-sm"><%= user.email %></p>
                    </div>
                </div>
            </div>

            <!-- My Bookings (as Passenger) -->
            <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
                <h2 class="text-xl font-bold text-gray-900 mb-4">
                    <i class="fas fa-user text-blue-500 mr-2"></i>My Bookings (as Passenger)
                </h2>
                <div id="myBookings" class="space-y-4">
                    <div class="text-center py-4">
                        <i class="fas fa-spinner fa-spin text-primary text-2xl"></i>
                        <p class="text-gray-600 mt-2">Loading...</p>
                    </div>
                </div>
            </div>

            <!-- Bookings I'm Hosting (as Rider) -->
            <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
                <h2 class="text-xl font-bold text-gray-900 mb-4">
                    <i class="fas fa-car text-green-500 mr-2"></i>Bookings for My Rides (as Rider)
                </h2>
                <div id="rideBookings" class="space-y-4">
                    <div class="text-center py-4">
                        <i class="fas fa-spinner fa-spin text-primary text-2xl"></i>
                        <p class="text-gray-600 mt-2">Loading...</p>
                    </div>
                </div>
            </div>

            <!-- Existing Chats -->
            <div class="bg-white rounded-lg shadow-sm p-6">
                <h2 class="text-xl font-bold text-gray-900 mb-4">
                    <i class="fas fa-comments text-indigo-500 mr-2"></i>Existing Chats
                </h2>
                <div id="existingChats" class="space-y-4">
                    <div class="text-center py-4">
                        <i class="fas fa-spinner fa-spin text-primary text-2xl"></i>
                        <p class="text-gray-600 mt-2">Loading...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
const userId = '<%= user._id %>';

// Load my bookings (as passenger)
async function loadMyBookings() {
    try {
        const response = await fetch('/bookings/my-bookings');
        const data = await response.json();
        
        const container = document.getElementById('myBookings');
        
        if (data.bookings && data.bookings.length > 0) {
            container.innerHTML = data.bookings.map(booking => `
                <div class="border border-gray-200 rounded-lg p-4">
                    <div class="flex items-start justify-between">
                        <div class="flex-1">
                            <div class="flex items-center space-x-3 mb-2">
                                <span class="px-3 py-1 text-xs font-semibold rounded-full ${getStatusColor(booking.status)}">
                                    ${booking.status}
                                </span>
                                <span class="text-sm text-gray-600">
                                    <i class="fas fa-calendar mr-1"></i>
                                    ${new Date(booking.createdAt).toLocaleDateString()}
                                </span>
                            </div>
                            <p class="text-sm text-gray-700 mb-2">
                                <strong>Booking ID:</strong> 
                                <code class="bg-gray-100 px-2 py-1 rounded text-xs">${booking._id}</code>
                            </p>
                            <p class="text-sm text-gray-700 mb-2">
                                <strong>Rider:</strong> ${booking.rider?.name || 'Unknown'}
                            </p>
                            <p class="text-sm text-gray-700">
                                <strong>Seats:</strong> ${booking.seatsBooked} | 
                                <strong>Price:</strong> ₹${booking.totalPrice}
                            </p>
                        </div>
                        <div class="flex flex-col space-y-2">
                            <button onclick="testOpenChat('${booking._id}')" 
                                class="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg text-sm font-semibold whitespace-nowrap">
                                <i class="fas fa-comment mr-1"></i>Open Chat
                            </button>
                            <button onclick="checkChatExists('${booking._id}')" 
                                class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg text-sm font-semibold whitespace-nowrap">
                                <i class="fas fa-search mr-1"></i>Check Chat
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        } else {
            container.innerHTML = '<p class="text-gray-500 text-center py-4">No bookings found</p>';
        }
    } catch (error) {
        console.error('Error loading bookings:', error);
        document.getElementById('myBookings').innerHTML = 
            '<p class="text-red-500 text-center py-4">Error loading bookings</p>';
    }
}

// Load bookings for my rides (as rider)
async function loadRideBookings() {
    try {
        const response = await fetch('/rides/my-rides');
        const data = await response.json();
        
        const container = document.getElementById('rideBookings');
        let allBookings = [];
        
        if (data.rides) {
            data.rides.forEach(ride => {
                if (ride.bookings && ride.bookings.length > 0) {
                    ride.bookings.forEach(booking => {
                        allBookings.push({
                            ...booking,
                            rideName: `${ride.from?.address} → ${ride.to?.address}`
                        });
                    });
                }
            });
        }
        
        if (allBookings.length > 0) {
            container.innerHTML = allBookings.map(booking => `
                <div class="border border-gray-200 rounded-lg p-4">
                    <div class="flex items-start justify-between">
                        <div class="flex-1">
                            <div class="flex items-center space-x-3 mb-2">
                                <span class="px-3 py-1 text-xs font-semibold rounded-full ${getStatusColor(booking.status)}">
                                    ${booking.status}
                                </span>
                                <span class="text-sm text-gray-600">
                                    <i class="fas fa-calendar mr-1"></i>
                                    ${new Date(booking.createdAt).toLocaleDateString()}
                                </span>
                            </div>
                            <p class="text-sm text-gray-700 mb-2">
                                <strong>Booking ID:</strong> 
                                <code class="bg-gray-100 px-2 py-1 rounded text-xs">${booking._id}</code>
                            </p>
                            <p class="text-sm text-gray-700 mb-2">
                                <strong>Passenger:</strong> ${booking.passenger?.name || 'Unknown'}
                            </p>
                            <p class="text-sm text-gray-600 mb-2">
                                <i class="fas fa-route text-xs mr-1"></i>${booking.rideName?.substring(0, 60)}...
                            </p>
                        </div>
                        <div class="flex flex-col space-y-2">
                            <button onclick="testOpenChat('${booking._id}')" 
                                class="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg text-sm font-semibold whitespace-nowrap">
                                <i class="fas fa-comment mr-1"></i>Open Chat
                            </button>
                            <button onclick="checkChatExists('${booking._id}')" 
                                class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg text-sm font-semibold whitespace-nowrap">
                                <i class="fas fa-search mr-1"></i>Check Chat
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        } else {
            container.innerHTML = '<p class="text-gray-500 text-center py-4">No bookings found for your rides</p>';
        }
    } catch (error) {
        console.error('Error loading ride bookings:', error);
        document.getElementById('rideBookings').innerHTML = 
            '<p class="text-red-500 text-center py-4">Error loading bookings</p>';
    }
}

// Load existing chats
async function loadExistingChats() {
    try {
        const response = await fetch('/chat/api/my-chats');
        const data = await response.json();
        
        const container = document.getElementById('existingChats');
        
        if (data.chats && data.chats.length > 0) {
            container.innerHTML = data.chats.map(chat => {
                const otherUser = chat.participants.find(p => p._id !== userId);
                return `
                    <div class="border border-gray-200 rounded-lg p-4">
                        <div class="flex items-start justify-between">
                            <div class="flex items-center space-x-3">
                                <img src="${otherUser?.profilePhoto || '/images/default-avatar.png'}" 
                                    class="w-12 h-12 rounded-full" alt="${otherUser?.name}">
                                <div>
                                    <p class="font-semibold text-gray-900">${otherUser?.name || 'Unknown'}</p>
                                    <p class="text-sm text-gray-600">
                                        <strong>Chat ID:</strong> 
                                        <code class="bg-gray-100 px-2 py-1 rounded text-xs">${chat._id}</code>
                                    </p>
                                    <p class="text-sm text-gray-600">
                                        <strong>Booking ID:</strong> 
                                        <code class="bg-gray-100 px-2 py-1 rounded text-xs">${chat.booking?._id || 'None'}</code>
                                    </p>
                                    <p class="text-sm text-gray-600">
                                        ${chat.messages?.length || 0} messages | 
                                        ${chat.unreadCount || 0} unread
                                    </p>
                                </div>
                            </div>
                            <a href="/chat/${chat._id}" 
                                class="px-4 py-2 bg-primary hover:bg-green-700 text-white rounded-lg text-sm font-semibold">
                                <i class="fas fa-eye mr-1"></i>View Chat
                            </a>
                        </div>
                    </div>
                `;
            }).join('');
        } else {
            container.innerHTML = '<p class="text-gray-500 text-center py-4">No chats found</p>';
        }
    } catch (error) {
        console.error('Error loading chats:', error);
        document.getElementById('existingChats').innerHTML = 
            '<p class="text-red-500 text-center py-4">Error loading chats</p>';
    }
}

// Test opening chat
async function testOpenChat(bookingId) {
    console.log('🧪 Testing chat for booking:', bookingId);
    
    try {
        LANEApp.showAlert('Creating/opening chat...', 'info');
        
        const response = await fetch(`/chat/api/booking/${bookingId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });
        
        console.log('Response status:', response.status);
        const result = await response.json();
        console.log('Response data:', result);
        
        if (result.success && result.chat) {
            LANEApp.showAlert('Chat created! Redirecting...', 'success');
            console.log('✅ Chat ID:', result.chat._id);
            setTimeout(() => {
                window.location.href = `/chat/${result.chat._id}`;
            }, 1000);
        } else {
            LANEApp.showAlert('Failed: ' + (result.message || 'Unknown error'), 'error');
            console.error('❌ Failed:', result);
        }
    } catch (error) {
        LANEApp.showAlert('Error: ' + error.message, 'error');
        console.error('❌ Error:', error);
    }
}

// Check if chat exists
async function checkChatExists(bookingId) {
    console.log('🔍 Checking chat for booking:', bookingId);
    
    try {
        const response = await fetch(`/chat/api/booking/${bookingId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });
        
        const result = await response.json();
        
        if (result.success && result.chat) {
            alert(`✅ Chat exists!\n\nChat ID: ${result.chat._id}\nBooking: ${bookingId}\nParticipants: ${result.chat.participants.length}\nMessages: ${result.chat.messages?.length || 0}`);
        } else {
            alert(`❌ No chat found or error:\n\n${result.message || 'Unknown error'}`);
        }
    } catch (error) {
        alert(`❌ Error checking chat:\n\n${error.message}`);
    }
}

// Helper function for status colors
function getStatusColor(status) {
    const colors = {
        'PENDING': 'bg-yellow-100 text-yellow-700',
        'CONFIRMED': 'bg-green-100 text-green-700',
        'COMPLETED': 'bg-blue-100 text-blue-700',
        'CANCELLED': 'bg-red-100 text-red-700',
        'REJECTED': 'bg-gray-100 text-gray-700'
    };
    return colors[status] || 'bg-gray-100 text-gray-700';
}

// Load all data on page load
loadMyBookings();
loadRideBookings();
loadExistingChats();
</script>

<%- include('../partials/footer') %>
