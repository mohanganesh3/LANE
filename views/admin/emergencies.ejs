<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - LANE Admin</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f9fafb;
        }

        .admin-content {
            padding: 30px;
        }

        .emergency-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        #map {
            height: 500px;
            border-radius: 12px;
            border: 2px solid #e5e7eb;
        }

        .emergency-card {
            background: white;
            padding: 20px;
            border-radius: 12px;
            border-left: 4px solid #ef4444;
            margin-bottom: 15px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .emergency-card:hover {
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.2);
            transform: translateX(5px);
        }

        .emergency-card.active {
            background: #fef2f2;
            border-left-color: #dc2626;
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
        }

        .emergency-card.resolved {
            border-left-color: #10b981;
            opacity: 0.7;
        }

        .emergency-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .user-info-sos {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .user-avatar-sos {
            width: 45px;
            height: 45px;
            border-radius: 50%;
        }

        .emergency-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 700;
            animation: pulse 2s infinite;
        }

        .badge-active {
            background: #fee2e2;
            color: #991b1b;
        }

        .badge-resolved {
            background: #d1fae5;
            color: #065f46;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }

        .emergency-details {
            color: #6b7280;
            font-size: 14px;
            line-height: 1.8;
        }

        .emergency-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .btn {
            padding: 8px 16px;
            border-radius: 6px;
            border: none;
            cursor: pointer;
            font-size: 13px;
            font-weight: 600;
            transition: all 0.3s;
        }

        .btn-call {
            background: #10b981;
            color: white;
        }

        .btn-track {
            background: #3b82f6;
            color: white;
        }

        .btn-resolve {
            background: #6366f1;
            color: white;
        }

        .stats-bar {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 12px;
            text-align: center;
        }

        .stat-number {
            font-size: 32px;
            font-weight: 700;
            color: #1f2937;
        }

        .stat-label {
            color: #6b7280;
            font-size: 14px;
            margin-top: 5px;
        }

        .alert-sound {
            display: none;
        }
    </style>
</head>
<body>
    <%- include('../partials/admin-sidebar.ejs', {active: 'emergencies'}) %>

    <div class="admin-main">
        <%- include('../partials/admin-header.ejs', {title: 'üö® Emergency SOS Dashboard', user}) %>

        <div class="admin-content">
            <!-- Stats Bar -->
            <div class="stats-bar">
                <div class="stat-card" style="border-left: 4px solid #ef4444;">
                    <div class="stat-number" id="activeCount"><%= emergencies.filter(e => e.status === 'ACTIVE').length %></div>
                    <div class="stat-label">üî¥ Active Alerts</div>
                </div>
                <div class="stat-card" style="border-left: 4px solid #f59e0b;">
                    <div class="stat-number"><%= emergencies.length %></div>
                    <div class="stat-label">üìä Total Today</div>
                </div>
                <div class="stat-card" style="border-left: 4px solid #10b981;">
                    <div class="stat-number"><%= emergencies.filter(e => e.status === 'RESOLVED').length %></div>
                    <div class="stat-label">‚úÖ Resolved</div>
                </div>
            </div>

            <!-- Emergency Grid -->
            <div class="emergency-grid">
                <!-- Map -->
                <div>
                    <h3 style="margin-bottom: 15px; color: #1f2937;">
                        <i class="fas fa-map-marker-alt"></i> Live Tracking Map
                    </h3>
                    <div id="map"></div>
                </div>

                <!-- Emergency List -->
                <div>
                    <h3 style="margin-bottom: 15px; color: #1f2937;">
                        <i class="fas fa-exclamation-triangle"></i> Emergency Alerts 
                        (<span id="alertCount"><%= emergencies.length %></span>)
                    </h3>
                    <div id="emergencyList">
                        <% if (emergencies && emergencies.length > 0) { %>
                            <% emergencies.forEach(emergency => { %>
                                <div class="emergency-card <%= emergency.status === 'ACTIVE' ? 'active' : 'resolved' %>" 
                                     data-id="<%= emergency._id %>"
                                     data-lat="<%= emergency.location.coordinates[1] %>"
                                     data-lng="<%= emergency.location.coordinates[0] %>"
                                     onclick="focusEmergency(this)">
                                    
                                    <div class="emergency-header">
                                        <div class="user-info-sos">
                                            <img src="<%= emergency.user.profile.photo || '/images/default-avatar.png' %>" 
                                                 alt="<%= emergency.user.profile.firstName %>" 
                                                 class="user-avatar-sos">
                                            <div>
                                                <strong style="color: #1f2937;">
                                                    <%= emergency.user.profile.firstName %> <%= emergency.user.profile.lastName %>
                                                </strong>
                                                <div style="font-size: 12px; color: #6b7280;">
                                                    <%= emergency.user.phone %>
                                                </div>
                                            </div>
                                        </div>
                                        <span class="emergency-badge <%= emergency.status === 'ACTIVE' ? 'badge-active' : 'badge-resolved' %>">
                                            <%= emergency.status %>
                                        </span>
                                    </div>

                                    <div class="emergency-details">
                                        <div><strong>üìç Location:</strong> <%= emergency.locationName || 'Unknown' %></div>
                                        <div><strong>üöó Ride:</strong> 
                                            <% if (emergency.ride) { %>
                                                <%= emergency.ride.origin.address %> ‚Üí <%= emergency.ride.destination.address %>
                                            <% } else { %>
                                                N/A
                                            <% } %>
                                        </div>
                                        <div><strong>‚è∞ Time:</strong> <%= new Date(emergency.createdAt).toLocaleString() %></div>
                                    </div>

                                    <div class="emergency-actions">
                                        <button class="btn btn-call" onclick="callUser('<%= emergency.user.phone %>', event)">
                                            <i class="fas fa-phone"></i> Call User
                                        </button>
                                        <% if (emergency.user.emergencyContacts && emergency.user.emergencyContacts.length > 0) { %>
                                            <button class="btn btn-call" onclick="callEmergencyContact('<%= emergency.user.emergencyContacts[0].phone %>', event)">
                                                <i class="fas fa-user-shield"></i> Call Emergency Contact
                                            </button>
                                        <% } %>
                                        <% if (emergency.status === 'ACTIVE') { %>
                                            <button class="btn btn-resolve" onclick="resolveEmergency('<%= emergency._id %>', event)">
                                                <i class="fas fa-check"></i> Mark Resolved
                                            </button>
                                        <% } %>
                                    </div>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <div style="text-align: center; padding: 60px 20px; color: #6b7280;">
                                <i class="fas fa-shield-alt" style="font-size: 64px; color: #d1d5db; margin-bottom: 20px;"></i>
                                <h3 style="font-size: 20px; margin-bottom: 10px;">No Active Emergencies</h3>
                                <p>All clear! No SOS alerts at the moment.</p>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Alert Sound - Disabled until audio file is added -->
    <!-- <audio id="alertSound" class="alert-sound">
        <source src="/sounds/emergency-alert.mp3" type="audio/mpeg">
    </audio> -->

    <script>
        // Initialize Map
        let map, markers = {};
        
        function initMap() {
            map = L.map('map').setView([28.6139, 77.2090], 12); // Default to Delhi
            
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '¬© OpenStreetMap contributors'
            }).addTo(map);

            // Add emergency markers
            const emergencies = document.querySelectorAll('.emergency-card.active');
            emergencies.forEach(card => {
                const lat = parseFloat(card.dataset.lat);
                const lng = parseFloat(card.dataset.lng);
                const id = card.dataset.id;
                
                if (lat && lng) {
                    const marker = L.marker([lat, lng], {
                        icon: L.divIcon({
                            className: 'custom-marker',
                            html: '<div style="background: #ef4444; width: 30px; height: 30px; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; border: 3px solid white; box-shadow: 0 2px 8px rgba(0,0,0,0.3);">üö®</div>',
                            iconSize: [30, 30]
                        })
                    }).addTo(map);
                    
                    markers[id] = marker;
                }
            });

            // Fit bounds to show all markers
            if (Object.keys(markers).length > 0) {
                const group = L.featureGroup(Object.values(markers));
                map.fitBounds(group.getBounds().pad(0.1));
            }
        }

        // Focus Emergency on Map
        function focusEmergency(card) {
            const id = card.dataset.id;
            const marker = markers[id];
            
            if (marker) {
                map.setView(marker.getLatLng(), 15);
                marker.openPopup();
            }

            // Remove active class from all cards
            document.querySelectorAll('.emergency-card').forEach(c => c.classList.remove('active'));
            // Add active class to clicked card
            card.classList.add('active');
        }

        // Call User
        function callUser(phone, event) {
            event.stopPropagation();
            window.open(`tel:${phone}`);
        }

        // Call Emergency Contact
        function callEmergencyContact(phone, event) {
            event.stopPropagation();
            if (confirm(`Call emergency contact at ${phone}?`)) {
                window.open(`tel:${phone}`);
            }
        }

        // Resolve Emergency
        async function resolveEmergency(emergencyId, event) {
            event.stopPropagation();
            
            if (!confirm('Mark this emergency as RESOLVED?')) return;
            
            try {
                const response = await fetch(`/api/sos/${emergencyId}/resolve`, {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'}
                });
                
                const data = await response.json();
                if (data.success) {
                    alert('‚úÖ Emergency marked as resolved');
                    window.location.reload();
                } else {
                    alert('‚ùå Error: ' + data.message);
                }
            } catch (error) {
                alert('‚ùå Error resolving emergency');
                console.error(error);
            }
        }

        // Socket.IO Real-Time Updates
        const socket = io();
        
        socket.on('newEmergency', (emergency) => {
            console.log('üö® NEW EMERGENCY ALERT:', emergency);
            
            // Play alert sound (Disabled until audio file is added)
            // const alertSound = document.getElementById('alertSound');
            // alertSound.play().catch(e => console.log('Cannot play sound:', e));
            
            // Show browser notification
            if ('Notification' in window && Notification.permission === 'granted') {
                new Notification('üö® NEW EMERGENCY ALERT', {
                    body: `${emergency.user.name} needs help!`,
                    icon: '/images/emergency-icon.png',
                    requireInteraction: true
                });
            }
            
            // Reload page to show new emergency
            setTimeout(() => window.location.reload(), 2000);
        });

        // Request notification permission
        if ('Notification' in window && Notification.permission === 'default') {
            Notification.requestPermission();
        }

        // Initialize map when page loads
        window.addEventListener('load', initMap);
    </script>
</body>
</html>
