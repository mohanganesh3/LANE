<%- include('../partials/header') %>

<!-- Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

<style>
    .emergency-card {
        transition: all 0.3s;
    }
    .emergency-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 25px rgba(0,0,0,0.15);
    }
    .pulse-animation {
        animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }
    @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: .5; }
    }
    .priority-CRITICAL { border-left: 4px solid #DC2626; background: #FEF2F2; }
    .priority-HIGH { border-left: 4px solid #EA580C; background: #FFF7ED; }
    .priority-MEDIUM { border-left: 4px solid #F59E0B; background: #FFFBEB; }
    .priority-LOW { border-left: 4px solid #10B981; background: #F0FDF4; }
</style>

<div class="pt-16 min-h-screen bg-gray-50">
    <%- include('../partials/admin-sidebar', { active: 'sos' }) %>
    
    <div class="md:ml-64 p-6">
        <!-- Header -->
        <div class="mb-8">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-3xl font-bold text-gray-800 flex items-center">
                        <i class="fas fa-exclamation-triangle text-red-600 mr-3"></i>
                        SOS Emergency Dashboard
                    </h1>
                    <p class="text-gray-600 mt-2">Real-time emergency monitoring and response</p>
                </div>
                <div class="flex items-center space-x-4">
                    <div id="connectionStatus" class="px-4 py-2 rounded-lg bg-green-100 text-green-800 font-semibold">
                        <i class="fas fa-circle text-green-500 animate-pulse mr-2"></i>
                        Connected
                    </div>
                    <button onclick="refreshEmergencies()" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition">
                        <i class="fas fa-sync-alt mr-2"></i>Refresh
                    </button>
                </div>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div class="bg-red-600 text-white rounded-lg shadow-lg p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-red-100 text-sm font-semibold">ACTIVE EMERGENCIES</p>
                        <p id="activeCount" class="text-4xl font-bold mt-2">0</p>
                    </div>
                    <i class="fas fa-exclamation-circle text-6xl text-red-300 opacity-50"></i>
                </div>
            </div>

            <div class="bg-orange-600 text-white rounded-lg shadow-lg p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-orange-100 text-sm font-semibold">HIGH PRIORITY</p>
                        <p id="highPriorityCount" class="text-4xl font-bold mt-2">0</p>
                    </div>
                    <i class="fas fa-fire text-6xl text-orange-300 opacity-50"></i>
                </div>
            </div>

            <div class="bg-green-600 text-white rounded-lg shadow-lg p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-green-100 text-sm font-semibold">RESOLVED TODAY</p>
                        <p id="resolvedCount" class="text-4xl font-bold mt-2">0</p>
                    </div>
                    <i class="fas fa-check-circle text-6xl text-green-300 opacity-50"></i>
                </div>
            </div>

            <div class="bg-blue-600 text-white rounded-lg shadow-lg p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-blue-100 text-sm font-semibold">AVG RESPONSE TIME</p>
                        <p id="avgResponseTime" class="text-4xl font-bold mt-2">--</p>
                    </div>
                    <i class="fas fa-clock text-6xl text-blue-300 opacity-50"></i>
                </div>
            </div>
        </div>

        <!-- Filters -->
        <div class="bg-white rounded-lg shadow-md p-4 mb-6">
            <div class="flex items-center space-x-4">
                <label class="flex items-center">
                    <span class="mr-2 text-gray-700 font-semibold">Status:</span>
                    <select id="statusFilter" class="border rounded-lg px-3 py-2" onchange="filterEmergencies()">
                        <option value="">All</option>
                        <option value="ACTIVE" selected>Active</option>
                        <option value="IN_PROGRESS">In Progress</option>
                        <option value="RESOLVED">Resolved</option>
                        <option value="CANCELLED">Cancelled</option>
                    </select>
                </label>
                <label class="flex items-center">
                    <span class="mr-2 text-gray-700 font-semibold">Priority:</span>
                    <select id="priorityFilter" class="border rounded-lg px-3 py-2" onchange="filterEmergencies()">
                        <option value="">All</option>
                        <option value="CRITICAL">Critical</option>
                        <option value="HIGH">High</option>
                        <option value="MEDIUM">Medium</option>
                        <option value="LOW">Low</option>
                    </select>
                </label>
                <label class="flex items-center">
                    <span class="mr-2 text-gray-700 font-semibold">Type:</span>
                    <select id="typeFilter" class="border rounded-lg px-3 py-2" onchange="filterEmergencies()">
                        <option value="">All</option>
                        <option value="SOS">SOS</option>
                        <option value="ACCIDENT">Accident</option>
                        <option value="HARASSMENT">Harassment</option>
                        <option value="VEHICLE_ISSUE">Vehicle Issue</option>
                        <option value="MEDICAL">Medical</option>
                    </select>
                </label>
            </div>
        </div>

        <!-- Emergency List -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
            <div>
                <h2 class="text-xl font-bold text-gray-800 mb-4">
                    <i class="fas fa-list mr-2"></i>Emergency Alerts
                </h2>
                <div id="emergencyList" class="space-y-4">
                    <div class="text-center py-12 bg-white rounded-lg">
                        <i class="fas fa-spinner fa-spin text-4xl text-gray-400 mb-4"></i>
                        <p class="text-gray-600">Loading emergencies...</p>
                    </div>
                </div>
            </div>

            <!-- Map View -->
            <div>
                <h2 class="text-xl font-bold text-gray-800 mb-4">
                    <i class="fas fa-map-marked-alt mr-2"></i>Live Map View
                </h2>
                <div class="bg-white rounded-lg shadow-md overflow-hidden">
                    <div id="map" style="height: 600px;"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Emergency Detail Modal -->
<div id="emergencyModal" class="hidden fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center p-4">
    <div class="bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div id="modalContent">
            <!-- Content will be loaded here -->
        </div>
    </div>
</div>

<!-- Leaflet JS -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<!-- Socket.IO -->
<script src="/socket.io/socket.io.js"></script>

<script>
console.log('üîç [SOS Dashboard] Script started loading...');
let map, emergencies = [], markers = {};
const socket = io();
console.log('üîç [SOS Dashboard] Socket.IO initialized');

// Initialize map
function initMap() {
    console.log('üîç [SOS Dashboard] initMap() called');
    try {
        map = L.map('map').setView([28.7041, 77.1025], 12); // Default to Delhi
    
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '¬© OpenStreetMap contributors',
            maxZoom: 19
        }).addTo(map);
        
        console.log('‚úÖ [SOS Dashboard] Map initialized successfully');
    } catch (error) {
        console.error('‚ùå [SOS Dashboard] Map initialization error:', error);
    }
}

// Load emergencies
async function loadEmergencies() {
    try {
        console.log('üîÑ [Admin Dashboard] Loading emergencies...');
        const statusFilter = document.getElementById('statusFilter')?.value || 'ACTIVE';
        const response = await fetch(`/sos/admin/all?status=${statusFilter}`);
        const data = await response.json();
        
        if (data.success) {
            emergencies = data.emergencies;
            console.log(`‚úÖ [Admin Dashboard] Loaded ${emergencies.length} emergencies`);
            await loadStats();
            renderEmergencies();
            updateMap();
        } else {
            console.error('‚ùå [Admin Dashboard] Failed to load emergencies:', data.message);
        }
    } catch (error) {
        console.error('‚ùå [Admin Dashboard] Error loading emergencies:', error);
    }
}

// Load statistics
async function loadStats() {
    try {
        console.log('üìä [Admin Dashboard] Loading statistics...');
        const response = await fetch('/sos/admin/stats');
        const data = await response.json();
        
        if (data.success) {
            console.log('‚úÖ [Admin Dashboard] Stats loaded:', data.stats);
            updateStats(data.stats);
        } else {
            console.error('‚ùå [Admin Dashboard] Failed to load stats:', data.message);
        }
    } catch (error) {
        console.error('‚ùå [Admin Dashboard] Error loading stats:', error);
    }
}

// Update statistics
function updateStats(stats) {
    document.getElementById('activeCount').textContent = stats.active || 0;
    // Fix: Correct element id for High Priority card
    document.getElementById('highPriorityCount').textContent = stats.highPriority || 0;
    
    // Calculate resolved today
    const resolvedToday = emergencies.filter(e => {
        if (e.status !== 'RESOLVED') return false;
        const today = new Date().setHours(0, 0, 0, 0);
        const resolvedDate = new Date(e.resolvedAt).setHours(0, 0, 0, 0);
        return resolvedDate === today;
    }).length;
    
    document.getElementById('resolvedCount').textContent = resolvedToday;
    
    // Format average response time
    const avgTime = stats.avgResponseTime || 0;
    if (avgTime > 0) {
        const minutes = Math.floor(avgTime / 60);
        const seconds = Math.floor(avgTime % 60);
        document.getElementById('avgResponseTime').textContent = `${minutes}m ${seconds}s`;
    } else {
        document.getElementById('avgResponseTime').textContent = '--';
    }
}

// Render emergency list
function renderEmergencies() {
    const filters = {
        status: document.getElementById('statusFilter').value,
        priority: document.getElementById('priorityFilter').value,
        type: document.getElementById('typeFilter').value
    };
    
    let filtered = emergencies.filter(e => {
        if (filters.status && e.status !== filters.status) return false;
        if (filters.priority && e.priority !== filters.priority) return false;
        if (filters.type && e.type !== filters.type) return false;
        return true;
    });
    
    const listEl = document.getElementById('emergencyList');
    
    if (filtered.length === 0) {
        listEl.innerHTML = `
            <div class="text-center py-12 bg-white rounded-lg">
                <i class="fas fa-check-circle text-6xl text-green-400 mb-4"></i>
                <p class="text-gray-600 text-lg">No emergencies found</p>
            </div>
        `;
        return;
    }
    
    listEl.innerHTML = filtered.map(emergency => `
        <div class="emergency-card bg-white rounded-lg shadow-md p-6 cursor-pointer priority-${emergency.priority}" 
             onclick="showEmergencyDetail('${emergency._id}')">
            <div class="flex items-start justify-between mb-4">
                <div class="flex items-start space-x-4">
                    <div class="w-12 h-12 rounded-full bg-gray-200 overflow-hidden">
                        <img src="${emergency.user.profile.photo || '/images/default-avatar.png'}" 
                             alt="${emergency.user.profile.firstName}"
                             class="w-full h-full object-cover">
                    </div>
                    <div>
                        <h3 class="font-bold text-gray-800 text-lg">
                            ${emergency.user.profile.firstName} ${emergency.user.profile.lastName}
                        </h3>
                        <p class="text-sm text-gray-600">
                            <i class="fas fa-hashtag mr-1"></i>${emergency.emergencyId}
                        </p>
                        <p class="text-sm text-gray-600">
                            <i class="fas fa-phone mr-1"></i>${emergency.user.phone || 'N/A'}
                        </p>
                    </div>
                </div>
                <div class="text-right">
                    <span class="px-3 py-1 rounded-full text-xs font-bold ${getPriorityColor(emergency.priority)}">
                        ${emergency.priority}
                    </span>
                    <p class="text-xs text-gray-500 mt-2">
                        ${formatTime(emergency.createdAt)}
                    </p>
                </div>
            </div>
            
            <div class="space-y-2">
                <p class="text-sm text-gray-700">
                    <i class="fas fa-exclamation-triangle text-red-600 mr-2"></i>
                    <strong>Type:</strong> ${emergency.type}
                </p>
                <p class="text-sm text-gray-700">
                    <i class="fas fa-map-marker-alt text-blue-600 mr-2"></i>
                    <strong>Location:</strong> ${emergency.location?.address || 'Fetching address...'}
                </p>
                ${emergency.description ? `
                <p class="text-sm text-gray-700">
                    <i class="fas fa-sticky-note text-yellow-600 mr-2"></i>
                    <strong>Notes:</strong> ${emergency.description}
                </p>
                ` : ''}
                <div class="flex items-center justify-between pt-3 border-t">
                    <span class="text-sm font-semibold ${getStatusColor(emergency.status)}">
                        <i class="fas fa-circle mr-1"></i>${emergency.status}
                    </span>
                    <div class="space-x-2">
                        ${emergency.status === 'ACTIVE' ? `
                            <button onclick="respondToEmergency('${emergency._id}', event)" 
                                class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded text-sm transition">
                                <i class="fas fa-hand-paper mr-1"></i>Respond
                            </button>
                        ` : ''}
                        <button onclick="showEmergencyDetail('${emergency._id}')" 
                            class="px-3 py-1 bg-gray-600 hover:bg-gray-700 text-white rounded text-sm transition">
                            <i class="fas fa-eye mr-1"></i>Details
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `).join('');
}

// Update map with emergency markers
function updateMap() {
    // Clear existing markers
    Object.values(markers).forEach(marker => map.removeLayer(marker));
    markers = {};
    
    const bounds = [];
    
    emergencies.forEach(emergency => {
        if (emergency.location && emergency.location.coordinates && emergency.location.coordinates.coordinates) {
            const [lng, lat] = emergency.location.coordinates.coordinates;
            
            const icon = L.divIcon({
                className: 'custom-marker',
                html: `<div class="relative">
                    <div class="absolute -translate-x-1/2 -translate-y-1/2 w-12 h-12 bg-red-600 rounded-full flex items-center justify-center ${emergency.status === 'ACTIVE' ? 'pulse-animation' : ''}">
                        <i class="fas fa-exclamation-triangle text-white text-xl"></i>
                    </div>
                </div>`,
                iconSize: [48, 48],
                iconAnchor: [24, 24]
            });
            
            const marker = L.marker([lat, lng], { icon })
                .addTo(map)
                .bindPopup(`
                    <div class="p-2">
                        <h4 class="font-bold">${emergency.user?.profile?.firstName || 'User'} ${emergency.user?.profile?.lastName || ''}</h4>
                        <p class="text-sm text-gray-600">${emergency.type}</p>
                        <p class="text-sm text-gray-600">${emergency._id.substring(0, 8)}</p>
                        <button onclick="showEmergencyDetail('${emergency._id}')" class="mt-2 px-3 py-1 bg-blue-600 text-white rounded text-sm">
                            View Details
                        </button>
                    </div>
                `);
            
            markers[emergency._id] = marker;
            bounds.push([lat, lng]);
        }
    });
    
    // Fit map to show all markers
    if (bounds.length > 0) {
        map.fitBounds(bounds, { padding: [50, 50] });
    }
}

// Show emergency detail (simplified - can expand later)
async function showEmergencyDetail(emergencyId) {
    const emergency = emergencies.find(e => e._id === emergencyId);
    if (!emergency) return;
    
    const modal = document.getElementById('emergencyModal');
    const content = document.getElementById('modalContent');
    
    const lat = emergency.location?.coordinates?.coordinates?.[1] || 0;
    const lng = emergency.location?.coordinates?.coordinates?.[0] || 0;
    const userName = emergency.user?.profile?.firstName || 'User';
    const userLastName = emergency.user?.profile?.lastName || '';
    const userPhoto = emergency.user?.profile?.photo || '/images/default-avatar.png';
    const userEmail = emergency.user?.email || 'N/A';
    const userPhone = emergency.user?.phone || 'N/A';
    
    content.innerHTML = `
        <div class="p-8">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-2xl font-bold text-gray-800">
                    <i class="fas fa-exclamation-triangle text-red-600 mr-2"></i>
                    Emergency Details
                </h2>
                <button onclick="closeModal()" class="text-gray-400 hover:text-gray-600">
                    <i class="fas fa-times text-2xl"></i>
                </button>
            </div>
            
            <!-- User Info -->
            <div class="bg-gray-50 rounded-lg p-6 mb-6">
                <div class="flex items-center space-x-4 mb-4">
                    <div class="w-16 h-16 rounded-full bg-gray-200 overflow-hidden">
                        <img src="${userPhoto}" alt="${userName}" class="w-full h-full object-cover">
                    </div>
                    <div>
                        <h3 class="text-xl font-bold text-gray-800">${userName} ${userLastName}</h3>
                        <p class="text-gray-600">${userEmail}</p>
                        <p class="text-gray-600">${userPhone}</p>
                    </div>
                </div>
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <p class="text-sm text-gray-600">Emergency ID</p>
                        <p class="font-bold text-gray-800">${emergency._id.substring(0, 8)}</p>
                    </div>
                    <div>
                        <p class="text-sm text-gray-600">Type</p>
                        <p class="font-bold text-gray-800">${emergency.type}</p>
                    </div>
                    <div>
                        <p class="text-sm text-gray-600">Priority</p>
                        <span class="px-3 py-1 rounded-full text-xs font-bold ${getPriorityColor(emergency.priority)}">
                            ${emergency.priority}
                        </span>
                    </div>
                    <div>
                        <p class="text-sm text-gray-600">Status</p>
                        <span class="px-3 py-1 rounded-full text-xs font-bold ${getStatusColor(emergency.status)}">
                            ${emergency.status}
                        </span>
                    </div>
                </div>
            </div>
            
            <!-- Location Info -->
            <div class="bg-blue-50 rounded-lg p-6 mb-6">
                <h3 class="font-bold text-gray-800 mb-4">
                    <i class="fas fa-map-marker-alt text-blue-600 mr-2"></i>
                    Location Information
                </h3>
                <p class="text-gray-700 mb-2">${emergency.location?.address || 'Address not available'}</p>
                <p class="text-sm text-gray-600">Coordinates: ${lat.toFixed(6)}, ${lng.toFixed(6)}</p>
                <a href="https://www.google.com/maps?q=${lat},${lng}" target="_blank"
                    class="mt-3 inline-block px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition">
                    <i class="fas fa-map mr-2"></i>Open in Google Maps
                </a>
            </div>
            
            ${emergency.description ? `
            <div class="bg-yellow-50 rounded-lg p-6 mb-6">
                <h3 class="font-bold text-gray-800 mb-2">
                    <i class="fas fa-sticky-note text-yellow-600 mr-2"></i>
                    Description
                </h3>
                <p class="text-gray-700">${emergency.description}</p>
            </div>
            ` : ''}
            
            <!-- Guardian Contacts -->
            ${emergency.guardiansNotified && emergency.guardiansNotified.length > 0 ? `
            <div class="bg-green-50 rounded-lg p-6 mb-6">
                <h3 class="font-bold text-gray-800 mb-4">
                    <i class="fas fa-users text-green-600 mr-2"></i>
                    Guardians Notified (${emergency.guardiansNotified.length})
                </h3>
                <div class="space-y-2">
                    ${emergency.guardiansNotified.map(g => `
                        <div class="flex items-center justify-between bg-white p-3 rounded">
                            <div>
                                <p class="font-semibold">${g.name}</p>
                                <p class="text-sm text-gray-600">${g.email}</p>
                            </div>
                            <span class="text-xs ${g.emailSent ? 'text-green-600' : 'text-red-600'}">
                                ${g.emailSent ? '‚úÖ Sent' : '‚ùå Failed'}
                            </span>
                        </div>
                    `).join('')}
                </div>
            </div>
            ` : ''}
            
            <!-- Timeline -->
            <div class="bg-gray-50 rounded-lg p-6 mb-6">
                <h3 class="font-bold text-gray-800 mb-4">
                    <i class="fas fa-clock text-gray-600 mr-2"></i>
                    Timeline
                </h3>
                <div class="space-y-3">
                    <div class="flex items-start space-x-3">
                        <i class="fas fa-circle text-red-600 mt-1 text-xs"></i>
                        <div>
                            <p class="font-semibold text-gray-800">Emergency Triggered</p>
                            <p class="text-sm text-gray-600">${new Date(emergency.triggeredAt).toLocaleString()}</p>
                        </div>
                    </div>
                    ${emergency.respondedAt ? `
                    <div class="flex items-start space-x-3">
                        <i class="fas fa-circle text-blue-600 mt-1 text-xs"></i>
                        <div>
                            <p class="font-semibold text-gray-800">Admin Responded</p>
                            <p class="text-sm text-gray-600">${new Date(emergency.respondedAt).toLocaleString()}</p>
                        </div>
                    </div>
                    ` : ''}
                    ${emergency.resolvedAt ? `
                    <div class="flex items-start space-x-3">
                        <i class="fas fa-circle text-green-600 mt-1 text-xs"></i>
                        <div>
                            <p class="font-semibold text-gray-800">Emergency Resolved</p>
                            <p class="text-sm text-gray-600">${new Date(emergency.resolvedAt).toLocaleString()}</p>
                        </div>
                    </div>
                    ` : ''}
                </div>
            </div>
            
            <!-- Actions -->
            <div class="flex justify-end space-x-3">
                <button onclick="closeModal()" 
                    class="px-6 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition">
                    Close
                </button>
                ${emergency.status === 'ACTIVE' ? `
                <button onclick="respondToEmergency('${emergency._id}')" 
                    class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition">
                    <i class="fas fa-hand-paper mr-2"></i>Respond
                </button>
                ` : ''}
                ${emergency.status === 'IN_PROGRESS' ? `
                <button onclick="resolveEmergency('${emergency._id}')" 
                    class="px-6 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition">
                    <i class="fas fa-check mr-2"></i>Mark Resolved
                </button>
                ` : ''}
            </div>
        </div>
    `;
    
    modal.classList.remove('hidden');
}
            const content = document.getElementById('modalContent');
            
            content.innerHTML = `
                <div class="p-8">
                    <div class="flex items-center justify-between mb-6">
                        <h2 class="text-2xl font-bold text-gray-800">
                            <i class="fas fa-exclamation-triangle text-red-600 mr-2"></i>
                            Emergency Details
                        </h2>
                        <button onclick="closeModal()" class="text-gray-400 hover:text-gray-600">
                            <i class="fas fa-times text-2xl"></i>
                        </button>
                    </div>
                    
                    <!-- User Info -->
                    <div class="bg-gray-50 rounded-lg p-6 mb-6">
                        <div class="flex items-center space-x-4 mb-4">
                            <div class="w-16 h-16 rounded-full bg-gray-200 overflow-hidden">
                                <img src="${emergency.user.profile.photo || '/images/default-avatar.png'}" 
                                     alt="${emergency.user.profile.firstName}"
                                     class="w-full h-full object-cover">
                            </div>
                            <div>
                                <h3 class="text-xl font-bold text-gray-800">
                                    ${emergency.user.profile.firstName} ${emergency.user.profile.lastName}
                                </h3>
                                <p class="text-gray-600">${emergency.user.email}</p>
                                <p class="text-gray-600">${emergency.user.phone || 'No phone'}</p>
                            </div>
                        </div>
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <p class="text-sm text-gray-600">Emergency ID</p>
                                <p class="font-bold text-gray-800">${emergency.emergencyId}</p>
                            </div>
                            <div>
                                <p class="text-sm text-gray-600">Type</p>
                                <p class="font-bold text-gray-800">${emergency.type}</p>
                            </div>
                            <div>
                                <p class="text-sm text-gray-600">Priority</p>
                                <span class="px-3 py-1 rounded-full text-xs font-bold ${getPriorityColor(emergency.priority)}">
                                    ${emergency.priority}
                                </span>
                            </div>
                            <div>
                                <p class="text-sm text-gray-600">Status</p>
                                <span class="px-3 py-1 rounded-full text-xs font-bold ${getStatusColor(emergency.status)}">
                                    ${emergency.status}
                                </span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Location Info -->
                    <div class="bg-blue-50 rounded-lg p-6 mb-6">
                        <h3 class="font-bold text-gray-800 mb-4">
                            <i class="fas fa-map-marker-alt text-blue-600 mr-2"></i>
                            Location Information
                        </h3>
                        <p class="text-gray-700 mb-2">${emergency.location.address || 'Address not available'}</p>
                        <p class="text-sm text-gray-600">
                            Coordinates: ${emergency.location.coordinates[1].toFixed(6)}, ${emergency.location.coordinates[0].toFixed(6)}
                        </p>
                        ${emergency.location.accuracy ? `
                        <p class="text-sm text-gray-600">Accuracy: ${emergency.location.accuracy.toFixed(0)}m</p>
                        ` : ''}
                        <button onclick="showOnMap(${emergency.location.coordinates[1]}, ${emergency.location.coordinates[0]})" 
                            class="mt-3 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition">
                            <i class="fas fa-map mr-2"></i>Show on Map
                        </button>
                    </div>
                    
                    ${emergency.notes ? `
                    <!-- Notes -->
                    <div class="bg-yellow-50 rounded-lg p-6 mb-6">
                        <h3 class="font-bold text-gray-800 mb-2">
                            <i class="fas fa-sticky-note text-yellow-600 mr-2"></i>
                            Notes
                        </h3>
                        <p class="text-gray-700">${emergency.notes}</p>
                    </div>
                    ` : ''}
                    
                    <!-- Timeline -->
                    <div class="bg-gray-50 rounded-lg p-6 mb-6">
                        <h3 class="font-bold text-gray-800 mb-4">
                            <i class="fas fa-clock text-gray-600 mr-2"></i>
                            Timeline
                        </h3>
                        <div class="space-y-3">
                            <div class="flex items-start space-x-3">
                                <i class="fas fa-circle text-red-600 mt-1"></i>
                                <div>
                                    <p class="font-semibold text-gray-800">Emergency Triggered</p>
                                    <p class="text-sm text-gray-600">${new Date(emergency.createdAt).toLocaleString()}</p>
                                </div>
                            </div>
                            ${emergency.responseTimeline && emergency.responseTimeline.length > 0 ? 
                                emergency.responseTimeline.map(event => `
                                    <div class="flex items-start space-x-3">
                                        <i class="fas fa-circle text-blue-600 mt-1"></i>
                                        <div>
                                            <p class="font-semibold text-gray-800">${event.action}</p>
                                            <p class="text-sm text-gray-600">${new Date(event.timestamp).toLocaleString()}</p>
                                            ${event.performedBy ? `<p class="text-xs text-gray-500">By: ${event.performedBy.profile.firstName}</p>` : ''}
                                        </div>
                                    </div>
                                `).join('') : ''
                            }
                        </div>
                    </div>
                    
                    <!-- Actions -->
                    <div class="flex space-x-3">
                        ${emergency.status === 'ACTIVE' ? `
                        <button onclick="respondToEmergencyInModal('${emergency._id}')" 
                            class="flex-1 px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-semibold transition">
                            <i class="fas fa-hand-paper mr-2"></i>Respond to Emergency
                        </button>
                        ` : ''}
                        <a href="tel:${emergency.user.phone}" 
                            class="flex-1 px-6 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg font-semibold text-center transition">
                            <i class="fas fa-phone mr-2"></i>Call User
                        </a>
                        ${emergency.status !== 'RESOLVED' ? `
                        <button onclick="resolveEmergencyInModal('${emergency._id}')" 
                            class="flex-1 px-6 py-3 bg-gray-600 hover:bg-gray-700 text-white rounded-lg font-semibold transition">
                            <i class="fas fa-check mr-2"></i>Mark Resolved
                        </button>
                        ` : ''}
                    </div>
                </div>
            `;
            
            modal.classList.remove('hidden');
        }
    } catch (error) {
        console.error('Failed to load emergency details:', error);
        alert('Failed to load emergency details');
    }
}

// Respond to emergency
async function respondToEmergency(emergencyId, event) {
    if (event) event.stopPropagation();
    
    const confirmed = confirm('Mark yourself as responding to this emergency?');
    if (!confirmed) return;
    
    try {
        const response = await fetch(`/admin/sos/emergencies/${emergencyId}/respond`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });
        
        const data = await response.json();
        if (data.success) {
            alert('You are now responding to this emergency!');
            await loadEmergencies();
        }
    } catch (error) {
        console.error('Failed to respond:', error);
        alert('Failed to respond to emergency');
    }
}

async function respondToEmergencyInModal(emergencyId) {
    await respondToEmergency(emergencyId);
    closeModal();
}

// Resolve emergency
async function resolveEmergencyInModal(emergencyId) {
    const resolution = prompt('Enter resolution notes:');
    if (!resolution) return;
    
    try {
        const response = await fetch(`/admin/sos/emergencies/${emergencyId}/resolve`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ resolution })
        });
        
        const data = await response.json();
        if (data.success) {
            alert('Emergency marked as resolved!');
            closeModal();
            await loadEmergencies();
        }
    } catch (error) {
        console.error('Failed to resolve:', error);
        alert('Failed to resolve emergency');
    }
}

// Helper functions
function getPriorityColor(priority) {
    const colors = {
        'CRITICAL': 'bg-red-600 text-white',
        'HIGH': 'bg-orange-600 text-white',
        'MEDIUM': 'bg-yellow-600 text-white',
        'LOW': 'bg-green-600 text-white'
    };
    return colors[priority] || 'bg-gray-600 text-white';
}

function getStatusColor(status) {
    const colors = {
        'ACTIVE': 'text-red-600',
        'IN_PROGRESS': 'text-blue-600',
        'RESOLVED': 'text-green-600',
        'CANCELLED': 'text-gray-600'
    };
    return colors[status] || 'text-gray-600';
}

function formatTime(timestamp) {
    const now = new Date();
    const time = new Date(timestamp);
    const diff = Math.floor((now - time) / 1000 / 60); // minutes
    
    if (diff < 1) return 'Just now';
    if (diff < 60) return `${diff}m ago`;
    if (diff < 1440) return `${Math.floor(diff / 60)}h ago`;
    return time.toLocaleDateString();
}

function showOnMap(lat, lng) {
    closeModal();
    map.setView([lat, lng], 16);
}

function closeModal() {
    document.getElementById('emergencyModal').classList.add('hidden');
}

function filterEmergencies() {
    renderEmergencies();
    updateMap();
}

function refreshEmergencies() {
    loadEmergencies();
}

// Respond to emergency
async function respondToEmergency(emergencyId, event) {
    if (event) event.stopPropagation();
    
    if (!confirm('Mark this emergency as "In Progress"? This will notify the user that help is on the way.')) {
        return;
    }
    
    try {
        const response = await fetch(`/sos/admin/${emergencyId}/update`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                status: 'IN_PROGRESS',
                adminNotes: 'Admin team is responding to this emergency'
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            alert('Emergency status updated to IN PROGRESS');
            loadEmergencies();
        } else {
            alert('Failed to update emergency: ' + (data.message || 'Unknown error'));
        }
    } catch (error) {
        console.error('Error responding to emergency:', error);
        alert('Failed to respond to emergency');
    }
}

// Resolve emergency
async function resolveEmergency(emergencyId) {
    const notes = prompt('Please add resolution notes:');
    if (!notes) return;
    
    try {
        const response = await fetch(`/sos/admin/${emergencyId}/update`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                status: 'RESOLVED',
                adminNotes: notes
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            alert('Emergency resolved successfully');
            loadEmergencies();
            closeModal();
        } else {
            alert('Failed to resolve emergency: ' + (data.message || 'Unknown error'));
        }
    } catch (error) {
        console.error('Error resolving emergency:', error);
        alert('Failed to resolve emergency');
    }
}

// Socket.IO events
socket.on('connect', () => {
    console.log('‚úÖ [Admin Dashboard] Socket connected:', socket.id);
    socket.emit('join-admin');
    document.getElementById('connectionStatus').innerHTML = '<i class="fas fa-circle text-green-500 animate-pulse mr-2"></i>Connected';
    document.getElementById('connectionStatus').className = 'px-4 py-2 rounded-lg bg-green-100 text-green-800 font-semibold';
});

socket.on('admin-joined', (data) => {
    console.log('‚úÖ [Admin Dashboard] Successfully joined admin room:', data);
});

socket.on('disconnect', () => {
    console.log('‚ö†Ô∏è [Admin Dashboard] Socket disconnected');
    document.getElementById('connectionStatus').innerHTML = '<i class="fas fa-circle text-red-500 mr-2"></i>Disconnected';
    document.getElementById('connectionStatus').className = 'px-4 py-2 rounded-lg bg-red-100 text-red-800 font-semibold';
});

socket.on('emergency:new', (data) => {
    console.log('üö® [Admin Dashboard] New SOS alert received:', data);
    
    // Play alert sound (optional)
    try {
        const audio = new Audio('/sounds/alert.mp3');
        audio.play().catch(e => console.log('Could not play sound:', e.message));
    } catch(e) {}
    
    // Show browser notification
    if (Notification.permission === 'granted') {
        const userName = data.emergency?.user?.profile?.firstName || 'User';
        new Notification('üö® NEW EMERGENCY ALERT', {
            body: `${userName} needs help!`,
            icon: '/images/logo.png',
            requireInteraction: true
        });
    }
    
    // Reload emergencies to show the new one
    console.log('üîÑ [Admin Dashboard] Reloading emergencies...');
    loadEmergencies();
});

socket.on('emergency:updated', (data) => {
    console.log('üìç [Admin Dashboard] Emergency updated:', data);
    loadEmergencies();
});

socket.on('emergency:cancelled', (data) => {
    console.log('‚úÖ [Admin Dashboard] Emergency cancelled:', data);
    loadEmergencies();
});

// Initialize
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ [Admin Dashboard] Initializing SOS Dashboard...');
    initMap();
    loadEmergencies();
    
    // Request notification permission
    if (Notification.permission === 'default') {
        console.log('üì¢ [Admin Dashboard] Requesting notification permission...');
        Notification.requestPermission().then(permission => {
            console.log('üì¢ [Admin Dashboard] Notification permission:', permission);
        });
    }
    
    // Auto-refresh every 30 seconds
    setInterval(() => {
        console.log('üîÑ [Admin Dashboard] Auto-refreshing emergencies...');
        loadEmergencies();
    }, 30000);
    
    console.log('‚úÖ [Admin Dashboard] Initialization complete');
});
</script>

<%- include('../partials/footer') %>
