<%- include('../partials/header') %>

    <div class="pt-20 pb-12 bg-gray-50 min-h-screen">
        <div class="container mx-auto px-4">
            <!-- Search Header -->
            <div class="bg-white rounded-2xl shadow-lg p-8 mb-8">
                <h1 class="text-3xl font-bold text-gray-800 mb-6">
                    <i class="fas fa-search text-primary mr-3"></i>Find Your Perfect Ride
                </h1>

                <!-- Search Form -->
                <form id="ride-search-form" action="/rides/search/results" method="get" class="space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                        <!-- From Location -->
                        <div class="relative">
                            <label class="block text-gray-700 font-medium mb-2">
                                <i class="fas fa-map-marker-alt text-green-600 mr-2"></i>From
                            </label>
                            <input type="text" id="fromLocation" name="from"
                                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                                placeholder="Enter pickup location" required autocomplete="off">
                            <input type="hidden" id="fromCoordinates" name="fromCoordinates">
                        </div>

                        <!-- To Location -->
                        <div class="relative">
                            <label class="block text-gray-700 font-medium mb-2">
                                <i class="fas fa-map-marker-alt text-red-600 mr-2"></i>To
                            </label>
                            <input type="text" id="toLocation" name="to"
                                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                                placeholder="Enter destination" required autocomplete="off">
                            <input type="hidden" id="toCoordinates" name="toCoordinates">
                        </div>

                        <!-- Date -->
                        <div>
                            <label class="block text-gray-700 font-medium mb-2">
                                <i class="fas fa-calendar text-primary mr-2"></i>Date
                            </label>
                            <input type="date" name="date"
                                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                                min="<%= new Date().toISOString().split('T')[0] %>" required>
                        </div>

                        <!-- Passengers -->
                        <div>
                            <label class="block text-gray-700 font-medium mb-2">
                                <i class="fas fa-users text-primary mr-2"></i>Passengers
                            </label>
                            <select name="seats"
                                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent">
                                <option value="1">1 Passenger</option>
                                <option value="2">2 Passengers</option>
                                <option value="3">3 Passengers</option>
                                <option value="4">4 Passengers</option>
                            </select>
                        </div>
                    </div>

                    <div class="flex justify-center mt-6">
                        <button type="submit"
                            class="bg-primary hover:bg-green-700 text-white px-8 py-3 rounded-lg font-semibold transition-all transform hover:scale-105">
                            <i class="fas fa-search mr-2"></i>Search Rides
                        </button>
                    </div>
                </form>
            </div>

            <!-- Results Section -->
            <div id="search-results">
                <!-- AJAX search results will be injected here -->
            </div>
        <script>
            // Location Autocomplete using Nominatim API
            function initLocationAutocomplete(input, coordsInput) {
                let debounceTimer;
                let suggestionsDiv = null;

                // Create suggestions dropdown
                const createSuggestionsDiv = () => {
                    if (!suggestionsDiv) {
                        suggestionsDiv = document.createElement('div');
                        suggestionsDiv.className = 'absolute z-50 w-full bg-white border border-gray-300 rounded-lg shadow-lg mt-1 max-h-80 overflow-y-auto hidden';
                        input.parentElement.appendChild(suggestionsDiv);
                    }
                    return suggestionsDiv;
                };

            // Fetch suggestions from Nominatim API
            const fetchSuggestions = async (query) => {
                if (query.length < 3) {
                    createSuggestionsDiv().classList.add('hidden');
                    return;
                }

                try {
                    const response = await fetch(
                        `https://nominatim.openstreetmap.org/search?` +
                        `format=json&q=${encodeURIComponent(query)}&` +
                        `countrycodes=in&limit=5&addressdetails=1`,
                        {
                            headers: {
                                'User-Agent': 'LANE-Carpool-App'
                            }
                        }
                    );

                    const results = await response.json();
                    displaySuggestions(results);
                } catch (error) {
                    console.error('Error fetching location suggestions:', error);
                }
            };

            // Display suggestions
            const displaySuggestions = (results) => {
                const div = createSuggestionsDiv();

                if (results.length === 0) {
                    div.innerHTML = '<div class="p-3 text-gray-500 text-sm">No locations found</div>';
                    div.classList.remove('hidden');
                    return;
                }

                div.innerHTML = results.map(result => {
                    const displayName = result.display_name;
                    const icon = getLocationIcon(result.type);

                    return `
                <div class="suggestion-item p-3 hover:bg-gray-100 cursor-pointer border-b border-gray-100 last:border-b-0 transition"
                     data-lat="${result.lat}" 
                     data-lon="${result.lon}" 
                     data-display="${displayName}">
                    <div class="flex items-start">
                        <i class="${icon} text-primary mr-3 mt-1"></i>
                        <div class="flex-1">
                            <div class="font-medium text-gray-800 text-sm">${getShortName(result)}</div>
                            <div class="text-xs text-gray-500 mt-0.5">${displayName}</div>
                        </div>
                    </div>
                </div>
            `;
                }).join('');

                div.classList.remove('hidden');

                // Add click handlers
                div.querySelectorAll('.suggestion-item').forEach(item => {
                    item.addEventListener('click', () => {
                        const lat = parseFloat(item.dataset.lat);
                        const lon = parseFloat(item.dataset.lon);
                        const displayName = item.dataset.display;

                        input.value = displayName;

                        if (coordsInput) {
                            coordsInput.value = JSON.stringify({
                                type: 'Point',
                                coordinates: [lon, lat],
                                address: displayName
                            });
                        }

                        div.classList.add('hidden');
                    });
                });
            };

            // Get icon based on location type
            const getLocationIcon = (type) => {
                const iconMap = {
                    'city': 'fas fa-city',
                    'town': 'fas fa-building',
                    'village': 'fas fa-home',
                    'state': 'fas fa-map',
                    'administrative': 'fas fa-map-marked-alt',
                    'road': 'fas fa-road',
                    'railway': 'fas fa-train',
                    'airport': 'fas fa-plane',
                    'hotel': 'fas fa-hotel',
                    'restaurant': 'fas fa-utensils'
                };
                return iconMap[type] || 'fas fa-map-marker-alt';
            };

            // Get short name from result
            const getShortName = (result) => {
                if (result.address) {
                    return result.address.city ||
                        result.address.town ||
                        result.address.village ||
                        result.address.state_district ||
                        result.address.state ||
                        result.name;
                }
                return result.name || result.display_name.split(',')[0];
            };

            // Input event listener with debounce
            input.addEventListener('input', (e) => {
                clearTimeout(debounceTimer);
                const query = e.target.value.trim();

                debounceTimer = setTimeout(() => {
                    fetchSuggestions(query);
                }, 300);
            });

            // Hide suggestions when clicking outside
            document.addEventListener('click', (e) => {
                if (suggestionsDiv && !input.contains(e.target) && !suggestionsDiv.contains(e.target)) {
                    suggestionsDiv.classList.add('hidden');
                }
            });

            // Show suggestions on focus if input has value
            input.addEventListener('focus', () => {
                if (input.value.length >= 3 && suggestionsDiv && suggestionsDiv.children.length > 0) {
                    suggestionsDiv.classList.remove('hidden');
                }
            });
        }

        // Initialize autocomplete for location inputs
        document.addEventListener('DOMContentLoaded', () => {
            initLocationAutocomplete(
                document.getElementById('fromLocation'),
                document.getElementById('fromCoordinates')
            );

            initLocationAutocomplete(
                document.getElementById('toLocation'),
                document.getElementById('toCoordinates')
            );
        });

        // Traditional XHR for ride search form
        document.getElementById('ride-search-form').addEventListener('submit', function(e) {
            e.preventDefault();

            // Validate that locations are selected from autocomplete
            const fromCoords = document.getElementById('fromCoordinates').value;
            const toCoords = document.getElementById('toCoordinates').value;

            if (!fromCoords || !toCoords) {
                showAlert('Please select valid locations from the dropdown', 'error');
                return;
            }

            // Map form fields to validation-expected parameter names
            var form = e.target;
            var params = [];
            
            // Add origin (from fromCoordinates)
            params.push('origin=' + encodeURIComponent(fromCoords));
            
            // Add destination (from toCoordinates)
            params.push('destination=' + encodeURIComponent(toCoords));
            
            // Add date if provided
            var dateInput = form.elements['date'];
            if (dateInput && dateInput.value) {
                params.push('date=' + encodeURIComponent(dateInput.value));
            }
            
            // Add seats if provided
            var seatsInput = form.elements['seats'];
            if (seatsInput && seatsInput.value) {
                params.push('seats=' + encodeURIComponent(seatsInput.value));
            }
            
            var xhr = new XMLHttpRequest();
            xhr.open('GET', '/rides/search/results?' + params.join('&'), true);
            xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        document.getElementById('search-results').innerHTML = xhr.responseText;
                    } else {
                        // Try to parse error message from response
                        var errorMsg = 'Failed to search rides';
                        try {
                            var errorData = JSON.parse(xhr.responseText);
                            if (errorData && errorData.message) {
                                errorMsg = errorData.message;
                            }
                        } catch(e) {
                            // Use default error message
                        }
                        showAlert(errorMsg, 'error');
                    }
                }
            };
            xhr.send();
        });
    </script>

    <%- include('../partials/footer') %>