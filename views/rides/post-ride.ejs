<%- include('../partials/header') %>

    <div class="pt-20 pb-12 bg-gray-50 min-h-screen">
        <div class="container mx-auto px-4 max-w-4xl">
            <!-- Header -->
            <div class="bg-gradient-to-r from-primary to-green-600 rounded-2xl shadow-lg p-8 mb-8 text-white">
                <h1 class="text-3xl font-bold mb-2">
                    <i class="fas fa-plus-circle mr-3"></i>Post a New Ride
                </h1>
                <p class="opacity-90">Share your journey and earn while helping others travel</p>
            </div>

            <!-- Post Ride Form -->
            <div class="bg-white rounded-2xl shadow-lg p-8">
                <form id="postRideForm" class="space-y-6">
                    <!-- Route Section -->
                    <div class="border-b pb-6">
                        <h2 class="text-xl font-bold text-gray-800 mb-4">
                            <i class="fas fa-route text-primary mr-2"></i>Route Details
                        </h2>

                        <div class="space-y-4">
                            <!-- From Location -->
                            <div>
                                <label class="block text-gray-700 font-medium mb-2">
                                    <i class="fas fa-map-marker-alt text-green-600 mr-2"></i>Pick-up Location *
                                </label>
                                <input type="text" id="fromLocation" name="fromLocation"
                                    placeholder="Enter starting location"
                                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                                    required>
                                <input type="hidden" id="fromCoordinates" name="originCoordinates">
                            </div>

                            <!-- To Location -->
                            <div>
                                <label class="block text-gray-700 font-medium mb-2">
                                    <i class="fas fa-map-marker-alt text-red-600 mr-2"></i>Drop-off Location *
                                </label>
                                <input type="text" id="toLocation" name="toLocation" placeholder="Enter destination"
                                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                                    required>
                                <input type="hidden" id="toCoordinates" name="destinationCoordinates">
                            </div>

                            <!-- Stops (Optional) -->
                            <div>
                                <label class="block text-gray-700 font-medium mb-2">
                                    <i class="fas fa-map-signs text-primary mr-2"></i>Stops Along the Way (Optional)
                                </label>
                                <div id="stopsContainer" class="space-y-2">
                                    <!-- Stops will be added here dynamically -->
                                </div>
                                <button type="button" onclick="addStop()"
                                    class="mt-2 text-primary hover:text-green-700 font-semibold text-sm">
                                    <i class="fas fa-plus-circle mr-1"></i>Add Stop
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Date & Time Section -->
                    <div class="border-b pb-6">
                        <h2 class="text-xl font-bold text-gray-800 mb-4">
                            <i class="fas fa-calendar-alt text-primary mr-2"></i>Date & Time
                        </h2>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-gray-700 font-medium mb-2">Departure Date *</label>
                                <input type="date" name="date" min="<%= new Date().toISOString().split('T')[0] %>"
                                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                                    required>
                            </div>
                            <div>
                                <label class="block text-gray-700 font-medium mb-2">Departure Time *</label>
                                <input type="time" name="time"
                                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                                    required>
                            </div>
                        </div>
                    </div>

                    <!-- Vehicle & Capacity -->
                    <div class="border-b pb-6">
                        <h2 class="text-xl font-bold text-gray-800 mb-4">
                            <i class="fas fa-car text-primary mr-2"></i>Vehicle & Capacity
                        </h2>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <!-- Vehicle Selection -->
                            <div>
                                <label class="block text-gray-700 font-medium mb-2">Select Vehicle *</label>
                                <select name="vehicleId"
                                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                                    required>
                                    <option value="">Choose a vehicle</option>
                                    <% if (vehicles && vehicles.length> 0) { %>
                                        <% vehicles.forEach(vehicle=> { %>
                                            <option value="<%= vehicle._id %>">
                                                <%= vehicle.make %>
                                                    <%= vehicle.model %> (<%= vehicle.color %>) - <%=
                                                                vehicle.licensePlate %>
                                            </option>
                                            <% }); %>
                                                <% } else { %>
                                                    <option value="" disabled>No verified vehicles available</option>
                                                    <% } %>
                                </select>
                                <% if (!vehicles || vehicles.length===0) { %>
                                    <p class="text-sm text-red-600 mt-1">
                                        <i class="fas fa-exclamation-circle mr-1"></i>
                                        Please add and verify a vehicle first
                                    </p>
                                    <% } %>
                            </div>

                            <!-- Available Seats -->
                            <div>
                                <label class="block text-gray-700 font-medium mb-2">Available Seats *</label>
                                <select id="availableSeats" name="availableSeats"
                                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                                    onchange="calculatePricePerSeat()"
                                    required>
                                    <option value="1">1 seat</option>
                                    <option value="2">2 seats</option>
                                    <option value="3">3 seats</option>
                                    <option value="4" selected>4 seats</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Pricing -->
                    <div class="border-b pb-6">
                        <h2 class="text-xl font-bold text-gray-800 mb-4">
                            <i class="fas fa-rupee-sign text-primary mr-2"></i>Pricing
                        </h2>

                        <!-- Predicted Total Price (Reference) -->
                        <div class="mb-4 p-4 bg-gradient-to-r from-blue-50 to-blue-100 border-2 border-blue-400 rounded-lg">
                            <p class="text-sm text-blue-800 font-semibold mb-2">
                                <i class="fas fa-calculator mr-2"></i>Predicted Total Ride Price
                            </p>
                            <div class="text-3xl font-bold text-blue-700" id="predictedPrice">
                                Select locations first
                            </div>
                            <p class="text-xs text-blue-600 mt-2">
                                💡 Based on distance × ₹8 per km (you can adjust below)
                            </p>
                        </div>

                        <!-- Rider's Total Ride Price -->
                        <div class="mb-4">
                            <label class="block text-gray-700 font-bold mb-2 text-lg">
                                <i class="fas fa-hand-holding-usd text-green-600 mr-2"></i>Your Total Ride Price *
                            </label>
                            <div class="relative">
                                <span class="absolute left-4 top-4 text-gray-500 font-bold text-xl">₹</span>
                                <input type="number" id="totalRidePrice" min="1" step="1" 
                                    placeholder="Enter total ride price"
                                    class="w-full pl-12 pr-4 py-4 border-2 border-green-500 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-600 text-2xl font-bold text-green-700"
                                    oninput="calculatePricePerSeat()"
                                    required>
                            </div>
                            <p class="text-sm text-gray-600 mt-2">
                                💰 Enter the total price for the entire ride (will be divided among passengers)
                            </p>
                        </div>

                        <!-- Calculated Price Per Seat (Auto) -->
                        <div class="p-4 bg-green-50 border-l-4 border-green-500 rounded">
                            <div class="flex justify-between items-center">
                                <div>
                                    <p class="text-sm text-green-800 font-medium">Price per Seat (Auto-calculated)</p>
                                    <p class="text-xs text-green-600">Total price ÷ Available seats</p>
                                </div>
                                <div class="text-2xl font-bold text-green-700" id="pricePerSeatDisplay">
                                    ₹ -
                                </div>
                            </div>
                        </div>

                        <input type="hidden" id="calculatedDistance" name="distance">
                        <input type="hidden" id="pricePerSeat" name="pricePerSeat">
                        </div>
                    </div>

                    <!-- Preferences -->
                    <div class="border-b pb-6">
                        <h2 class="text-xl font-bold text-gray-800 mb-4">
                            <i class="fas fa-sliders-h text-primary mr-2"></i>Preferences
                        </h2>

                        <div class="space-y-4">
                            <!-- Instant Booking -->
                            <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                                <div>
                                    <h4 class="font-semibold text-gray-800">
                                        <i class="fas fa-bolt text-blue-600 mr-1"></i>Auto-Approve Bookings
                                    </h4>
                                    <p class="text-sm text-gray-600">Passengers can book without waiting for approval
                                    </p>
                                </div>
                                <label class="relative inline-flex items-center cursor-pointer">
                                    <input type="checkbox" name="instantBooking" class="sr-only peer" checked>
                                    <div
                                        class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary">
                                    </div>
                                </label>
                            </div>

                            <!-- Ladies Only (Only for Female Riders) -->
                            <% if (user.gender === 'FEMALE') { %>
                            <div class="flex items-center justify-between p-4 bg-pink-50 rounded-lg border border-pink-200">
                                <div>
                                    <h4 class="font-semibold text-gray-800">
                                        <i class="fas fa-female text-pink-600 mr-1"></i>Ladies Only
                                    </h4>
                                    <p class="text-sm text-gray-600">Only female passengers can book this ride</p>
                                </div>
                                <label class="relative inline-flex items-center cursor-pointer">
                                    <input type="checkbox" name="ladiesOnly" class="sr-only peer">
                                    <div
                                        class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-pink-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-pink-500">
                                    </div>
                                </label>
                            </div>
                            <% } %>

                            <!-- Additional Notes -->
                            <div>
                                <label class="block text-gray-700 font-medium mb-2">Additional Notes</label>
                                <textarea name="notes" rows="3"
                                    placeholder="Any special instructions or information for passengers..."
                                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"></textarea>
                            </div>
                        </div>
                    </div>

                    <!-- Submit Buttons -->
                    <div class="flex justify-end space-x-4">
                        <a href="/user/dashboard"
                            class="px-6 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition font-semibold">
                            Cancel
                        </a>
                        <button type="submit"
                            class="px-6 py-3 bg-primary hover:bg-green-700 text-white rounded-lg transition font-semibold">
                            <i class="fas fa-paper-plane mr-2"></i>Post Ride
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        // =================================================================================
        // CRITICAL DEBUGGING - DO NOT REMOVE
        // =================================================================================
        console.log('🟢 [DEBUG] Script tag started. If you see this, the script is executing.');

        // Global error handler to catch anything that might break the script
        window.addEventListener('error', function(event) {
            console.error('🔴 [CRITICAL] Uncaught Global Error:', {
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                error: event.error
            });
            alert('A critical JavaScript error occurred. Check the console for details.');
        });

        console.log('🟢 [DEBUG] Global error handler attached.');
        // =================================================================================

        let stopCount = 0;

        function addStop() {
            stopCount++;
            const container = document.getElementById('stopsContainer');
            const stopDiv = document.createElement('div');
            stopDiv.className = 'flex gap-2';
            stopDiv.innerHTML = `
        <input type="text" name="stops[]" placeholder="Stop location"
            class="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary stop-location-input">
        <button type="button" onclick="this.parentElement.remove()" 
            class="px-3 py-2 bg-red-500 hover:bg-red-600 text-white rounded-lg transition">
            <i class="fas fa-times"></i>
        </button>
    `;
            container.appendChild(stopDiv);

            // Initialize autocomplete for the new stop input
            const newInput = stopDiv.querySelector('.stop-location-input');
            initLocationAutocomplete(newInput, null);
        }

        // Update predicted amount when price per km or seats change
        function updatePredictedAmount() {
            // Simple function - not used in simplified version
        }

        // Calculate price per seat from total ride price
        function calculatePricePerSeat() {
            const totalRidePrice = parseFloat(document.getElementById('totalRidePrice').value);
            const availableSeats = parseInt(document.getElementById('availableSeats').value) || 4;
            
            if (totalRidePrice && totalRidePrice > 0) {
                const pricePerSeat = Math.round(totalRidePrice / availableSeats);
                
                // Update display
                document.getElementById('pricePerSeatDisplay').textContent = `₹${pricePerSeat}`;
                
                // Store in hidden field for form submission
                document.getElementById('pricePerSeat').value = pricePerSeat;
                
                console.log('💰 Total:', totalRidePrice, '÷', availableSeats, 'seats =', pricePerSeat, 'per seat');
            } else {
                document.getElementById('pricePerSeatDisplay').textContent = '₹ -';
                document.getElementById('pricePerSeat').value = '';
            }
        }

        // Update revenue calculation when custom price changes
        function updateCustomPrice() {
            // Simple function - not used in simplified version
        }        // Update revenue calculation when custom price changes
        function updateCustomPrice() {
            const customPrice = parseFloat(document.getElementById('customPricePerSeat').value);
            const totalSeats = parseInt(document.getElementById('availableSeats').value) || 4;
            const estimatedTotal = parseFloat(document.getElementById('totalTripCost').value) || 0;
            
            if (customPrice && customPrice > 0) {
                // Calculate total revenue if all seats book
                const totalRevenue = customPrice * totalSeats;
                
                // Calculate savings/profit
                const savings = totalRevenue - estimatedTotal;
                const savingsPercent = estimatedTotal > 0 ? Math.round((savings / estimatedTotal) * 100) : 0;
                
                // Update displays
                document.getElementById('revenueCalculation').innerHTML = 
                    `� If all ${totalSeats} seats book → You collect: <strong>₹${totalRevenue}</strong>`;
                
                if (savings >= 0) {
                    document.getElementById('profitStatus').innerHTML = 
                        `🎯 Your savings: <strong class="text-green-800">₹${savings}</strong> (${savingsPercent}% saved!)` +
                        (savings >= estimatedTotal ? ' <span class="font-bold">🎉 FREE RIDE!</span>' : '');
                } else {
                    const loss = Math.abs(savings);
                    const lossPercent = estimatedTotal > 0 ? Math.round((loss / estimatedTotal) * 100) : 0;
                    document.getElementById('profitStatus').innerHTML = 
                        `⚠️ You'll pay: <strong class="text-orange-700">₹${loss}</strong> (${lossPercent}% of total)`;
                }
            } else {
                document.getElementById('revenueCalculation').innerHTML = 
                    `💰 If all seats book → You collect: ₹ -`;
                document.getElementById('profitStatus').innerHTML = 
                    `� Your savings: ₹ -`;
            }
        }

        // Calculate distance and predicted amount automatically
        async function calculateDistanceAndAmount() {
            console.log('🔄 calculateDistanceAndAmount() called');
            
            const fromCoordsInput = document.getElementById('fromCoordinates');
            const toCoordsInput = document.getElementById('toCoordinates');
            const predictedPriceDiv = document.getElementById('predictedPrice');
            const calculatedDistanceInput = document.getElementById('calculatedDistance');
            const totalRidePriceInput = document.getElementById('totalRidePrice');

            if (!fromCoordsInput || !toCoordsInput || !predictedPriceDiv || !calculatedDistanceInput) {
                console.error('❌ Required elements not found');
                return;
            }

            if (!fromCoordsInput.value || !toCoordsInput.value) {
                console.log('⏳ Waiting for both locations to be selected...');
                predictedPriceDiv.textContent = 'Select both locations first';
                calculatedDistanceInput.value = '';
                return;
            }

            try {
                const fromCoords = JSON.parse(fromCoordsInput.value);
                const toCoords = JSON.parse(toCoordsInput.value);

                console.log('📍 Parsed coordinates:', {
                    fromCoords,
                    toCoords
                });

                if (!fromCoords.coordinates || !toCoords.coordinates) {
                    throw new Error('Invalid coordinate format');
                }

                const fromLon = fromCoords.coordinates[0];
                const fromLat = fromCoords.coordinates[1];
                const toLon = toCoords.coordinates[0];
                const toLat = toCoords.coordinates[1];

                console.log('✅ Calculating distance from:', `${fromLat}, ${fromLon}`, 'to:', `${toLat}, ${toLon}`);

                // Show loading state
                predictedPriceDiv.textContent = 'Calculating...';

                // Use OSRM API to get route distance
                console.log('🌐 Calling OSRM API...');
                const osrmUrl = `https://router.project-osrm.org/route/v1/driving/${fromLon},${fromLat};${toLon},${toLat}?overview=false`;
                
                const response = await fetch(osrmUrl);
                const data = await response.json();

                if (data.code === 'Ok' && data.routes && data.routes.length > 0) {
                    const distanceInMeters = data.routes[0].distance;
                    const distanceInKm = (distanceInMeters / 1000).toFixed(1);
                    
                    // Store distance
                    calculatedDistanceInput.value = distanceInKm;
                    
                    // Calculate predicted TOTAL price (distance × ₹8)
                    const predictedTotalPrice = Math.round(parseFloat(distanceInKm) * 8);
                    
                    // Update predicted price display
                    predictedPriceDiv.textContent = `₹${predictedTotalPrice}`;
                    predictedPriceDiv.innerHTML = `₹${predictedTotalPrice} <span class="text-sm font-normal">(${distanceInKm} km × ₹8)</span>`;
                    
                    // Auto-fill the total price input if empty
                    if (!totalRidePriceInput.value) {
                        totalRidePriceInput.value = predictedTotalPrice;
                        calculatePricePerSeat(); // Calculate per seat price
                    }
                    
                    console.log('✅ Distance:', distanceInKm, 'km | Predicted Total:', predictedTotalPrice);
                    showAlert('success', `Distance: ${distanceInKm} km | Total: ₹${predictedTotalPrice}`);
                } else {
                    console.log('⚠️ OSRM failed, using Haversine fallback');
                    // Fallback to Haversine formula
                    const distance = calculateHaversineDistance(fromLat, fromLon, toLat, toLon);
                    const distanceInKm = distance.toFixed(1);
                    
                    // Store distance
                    calculatedDistanceInput.value = distanceInKm;
                    
                    // Calculate predicted TOTAL price (distance × ₹8)
                    const predictedTotalPrice = Math.round(parseFloat(distanceInKm) * 8);
                    
                    // Update predicted price display
                    predictedPriceDiv.innerHTML = `₹${predictedTotalPrice} <span class="text-sm font-normal">(${distanceInKm} km × ₹8) - approx</span>`;
                    
                    // Auto-fill the total price input if empty
                    if (!totalRidePriceInput.value) {
                        totalRidePriceInput.value = predictedTotalPrice;
                        calculatePricePerSeat(); // Calculate per seat price
                    }
                    
                    console.log('✅ Distance (approx):', distanceInKm, 'km | Predicted Total:', predictedTotalPrice);
                    showAlert('info', `Distance (approx): ${distanceInKm} km | Total: ₹${predictedTotalPrice}`);
                }
            } catch (error) {
                console.error('❌ Error calculating distance:', error);
                predictedPriceDiv.textContent = 'Error - Select locations again';
                calculatedDistanceInput.value = '';
                showAlert('error', 'Error calculating distance');
            }
        }

        // Helper function to show alerts
        function showAlert(type, message) {
            const alertDiv = document.createElement('div');
            const colors = {
                success: 'bg-green-100 border-green-500 text-green-700',
                error: 'bg-red-100 border-red-500 text-red-700',
                info: 'bg-blue-100 border-blue-500 text-blue-700'
            };
            
            alertDiv.className = `fixed top-4 right-4 z-50 p-4 border-l-4 rounded shadow-lg ${colors[type]} animate-fade-in`;
            alertDiv.innerHTML = `
                <div class="flex items-center">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'} mr-2"></i>
                    <span>${message}</span>
                </div>
            `;
            
            document.body.appendChild(alertDiv);
            
            setTimeout(() => {
                alertDiv.style.opacity = '0';
                alertDiv.style.transition = 'opacity 0.5s';
                setTimeout(() => alertDiv.remove(), 500);
            }, 3000);
        }

        // Haversine formula for distance calculation (fallback)
        function calculateHaversineDistance(lat1, lon1, lat2, lon2) {
            const R = 6371; // Earth's radius in km
            const dLat = (lat2 - lat1) * Math.PI / 180;
            const dLon = (lon2 - lon1) * Math.PI / 180;
            const a =
                Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            return R * c;
        }

        // Location Autocomplete using Nominatim API
        function initLocationAutocomplete(input, coordsInput) {
            let debounceTimer;
            let suggestionsDiv = null;

            // Create suggestions dropdown
            const createSuggestionsDiv = () => {
                if (!suggestionsDiv) {
                    suggestionsDiv = document.createElement('div');
                    suggestionsDiv.className = 'absolute z-50 w-full bg-white border border-gray-300 rounded-lg shadow-lg mt-1 max-h-60 overflow-y-auto hidden';
                    input.parentElement.style.position = 'relative';
                    input.parentElement.appendChild(suggestionsDiv);
                }
                return suggestionsDiv;
            };

            // Fetch suggestions from Nominatim API
            const fetchSuggestions = async (query) => {
                if (query.length < 3) {
                    createSuggestionsDiv().classList.add('hidden');
                    return;
                }

                try {
                    const response = await fetch(
                        `https://nominatim.openstreetmap.org/search?` +
                        `format=json&q=${encodeURIComponent(query)}&` +
                        `countrycodes=in&limit=5&addressdetails=1`,
                        {
                            headers: {
                                'User-Agent': 'LANE-Carpool-App'
                            }
                        }
                    );

                    const results = await response.json();
                    displaySuggestions(results);
                } catch (error) {
                    console.error('Error fetching location suggestions:', error);
                }
            };

            // Display suggestions
            const displaySuggestions = (results) => {
                const div = createSuggestionsDiv();

                if (results.length === 0) {
                    div.innerHTML = '<div class="p-3 text-gray-500 text-sm">No locations found</div>';
                    div.classList.remove('hidden');
                    return;
                }

                div.innerHTML = results.map(result => {
                    const displayName = result.display_name;
                    const icon = getLocationIcon(result.type);

                    return `
                <div class="suggestion-item p-3 hover:bg-gray-100 cursor-pointer border-b border-gray-100 last:border-b-0 transition"
                     data-lat="${result.lat}" 
                     data-lon="${result.lon}" 
                     data-display="${displayName}">
                    <div class="flex items-start">
                        <i class="${icon} text-primary mr-3 mt-1"></i>
                        <div class="flex-1">
                            <div class="font-medium text-gray-800 text-sm">${getShortName(result)}</div>
                            <div class="text-xs text-gray-500 mt-0.5">${displayName}</div>
                        </div>
                    </div>
                </div>
            `;
                }).join('');

                div.classList.remove('hidden');

                // Add click handlers
                div.querySelectorAll('.suggestion-item').forEach(item => {
                    item.addEventListener('click', () => {
                        const lat = parseFloat(item.dataset.lat);
                        const lon = parseFloat(item.dataset.lon);
                        const displayName = item.dataset.display;

                        input.value = displayName;

                        if (coordsInput) {
                            coordsInput.value = JSON.stringify({
                                type: 'Point',
                                coordinates: [lon, lat],
                                address: displayName
                            });

                            console.log('📍 Location selected:', coordsInput.id, displayName);
                            
                            // Calculate distance and amount when both locations are set
                            setTimeout(() => {
                                calculateDistanceAndAmount();
                            }, 100);
                        }

                        div.classList.add('hidden');
                    });
                });
            };

            // Get icon based on location type
            const getLocationIcon = (type) => {
                const iconMap = {
                    'city': 'fas fa-city',
                    'town': 'fas fa-building',
                    'village': 'fas fa-home',
                    'state': 'fas fa-map',
                    'administrative': 'fas fa-map-marked-alt',
                    'road': 'fas fa-road',
                    'railway': 'fas fa-train',
                    'airport': 'fas fa-plane',
                    'hotel': 'fas fa-hotel',
                    'restaurant': 'fas fa-utensils'
                };
                return iconMap[type] || 'fas fa-map-marker-alt';
            };

            // Get short name from result
            const getShortName = (result) => {
                if (result.address) {
                    return result.address.city ||
                        result.address.town ||
                        result.address.village ||
                        result.address.state_district ||
                        result.address.state ||
                        result.name;
                }
                return result.name || result.display_name.split(',')[0];
            };

            // Input event listener with debounce
            input.addEventListener('input', (e) => {
                clearTimeout(debounceTimer);
                const query = e.target.value.trim();

                debounceTimer = setTimeout(() => {
                    fetchSuggestions(query);
                }, 300);
            });

            // Hide suggestions when clicking outside
            document.addEventListener('click', (e) => {
                if (suggestionsDiv && !input.contains(e.target) && !suggestionsDiv.contains(e.target)) {
                    suggestionsDiv.classList.add('hidden');
                }
            });

            // Show suggestions on focus if input has value
            input.addEventListener('focus', () => {
                if (input.value.length >= 3 && suggestionsDiv && suggestionsDiv.children.length > 0) {
                    suggestionsDiv.classList.remove('hidden');
                }
            });
        }

        // Initialize autocomplete and wire up listeners
        function initPostRidePage() {
            try {
                console.log('🚀 Post Ride page init');

                initLocationAutocomplete(
                    document.getElementById('fromLocation'),
                    document.getElementById('fromCoordinates')
                );

                initLocationAutocomplete(
                    document.getElementById('toLocation'),
                    document.getElementById('toCoordinates')
                );

                console.log('✅ Location autocomplete initialized');

                // Attach form submit handler
                const postRideForm = document.getElementById('postRideForm');
                if (postRideForm) {
                    postRideForm.addEventListener('submit', async (e) => {
                        e.preventDefault();

            const formData = new FormData(e.target);
            const data = Object.fromEntries(formData);

            // Validate locations
            if (!document.getElementById('fromCoordinates').value || !document.getElementById('toCoordinates').value) {
                LANEApp.showAlert('Please select valid locations from the dropdown', 'error');
                return;
            }

            // Get calculated distance
            const calculatedDistanceInput = document.getElementById('calculatedDistance');
            const distanceKm = calculatedDistanceInput.value;
            
            if (!distanceKm) {
                LANEApp.showAlert('Please wait for distance calculation to complete', 'error');
                return;
            }

            // Combine date and time
            data.departureTime = new Date(`${data.date}T${data.time}`).toISOString();
            delete data.date;
            delete data.time;

            // Add coordinates and distance
            data.originCoordinates = JSON.parse(document.getElementById('fromCoordinates').value);
            data.destinationCoordinates = JSON.parse(document.getElementById('toCoordinates').value);
            data.distance = parseFloat(distanceKm);

            // Convert checkboxes
            data.instantBooking = formData.get('instantBooking') === 'on';
            data.ladiesOnly = formData.get('ladiesOnly') === 'on';

            try {
                            const xhr = new XMLHttpRequest();
            xhr.open('POST', '/rides/post', true);
            xhr.setRequestHeader('Content-Type', 'application/json');

            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    let result;
                    try {
                        result = JSON.parse(xhr.responseText);
                    } catch (e) {
                        console.error('Invalid JSON response', e);
                        LANEApp.showAlert('Failed to post ride', 'error');
                        return;
                    }

                    if (xhr.status >= 200 && xhr.status < 300) {
                        LANEApp.showAlert('Ride posted successfully!', 'success');
                        setTimeout(() => {
                            window.location.href = '/rides/my-rides';
                        }, 1500);
                    } else {
                        LANEApp.showAlert(result.message || 'Failed to post ride', 'error');
                    }
                }
            };

            xhr.onerror = function() {
                console.error('XHR request failed');
    LANEApp.showAlert('Failed to post ride', 'error');
};

// Send JSON payload
xhr.send(JSON.stringify(data));

            } catch (error) {
                console.error('Error posting ride:', error);
                LANEApp.showAlert('Failed to post ride', 'error');
            }
                    });
                } else {
                    console.error('❌ Post ride form not found!');
                }
            } catch (err) {
                console.error('❌ Error during Post Ride init:', err);
            }
        }

        // Run init immediately if DOM is already ready, otherwise wait
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initPostRidePage);
        } else {
            initPostRidePage();
        }

        // Expose functions globally
        window.calculateDistanceAndAmount = calculateDistanceAndAmount;
        window.addStop = addStop;
        
        console.log('🟢 [DEBUG] Script initialization complete');
    </script>

    <%- include('../partials/footer') %>