<%- include('../partials/header') %>

<div class="pt-16 bg-gray-50 h-screen overflow-hidden">
    <div class="h-full flex flex-col">
        <div class="flex-1 flex overflow-hidden">
            <!-- Chat Sidebar -->
            <div class="w-full md:w-96 bg-white border-r border-gray-200 flex flex-col <%= currentChat ? 'hidden md:flex' : 'flex' %>">
                <!-- Sidebar Header -->
                <div class="px-6 py-4 border-b border-gray-200 bg-gradient-to-r from-primary to-green-600">
                    <h2 class="text-2xl font-bold text-white flex items-center">
                        <i class="fas fa-comments mr-3"></i>Messages
                    </h2>
                </div>

                <!-- Search Bar -->
                <div class="px-4 py-3 border-b border-gray-100">
                    <div class="relative">
                        <input type="text" 
                            id="searchChats" 
                            placeholder="Search conversations..."
                            class="w-full pl-10 pr-4 py-2.5 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-primary focus:border-transparent focus:bg-white transition">
                        <i class="fas fa-search absolute left-3 top-3.5 text-gray-400"></i>
                    </div>
                </div>

                <!-- Chat List -->
                <div class="flex-1 overflow-y-auto">
                    <% if (allChats && allChats.length > 0) { %>
                        <div class="divide-y divide-gray-100">
                            <% allChats.forEach(chat => { %>
                                <% 
                                const otherParticipant = chat.participants.find(p => p._id.toString() !== user._id.toString());
                                const isActive = currentChat && currentChat._id.toString() === chat._id.toString();
                                const lastMsg = chat.lastMessage;
                                %>
                                <a href="/chat/<%= chat._id %>" 
                                    class="chat-item block px-4 py-4 hover:bg-gray-50 transition-colors relative <%= isActive ? 'bg-green-50 border-l-4 border-l-primary' : '' %>"
                                    data-name="<%= otherParticipant?.name || 'Unknown' %>">
                                    <div class="flex items-start space-x-3">
                                        <!-- Avatar with Online Status -->
                                        <div class="relative flex-shrink-0">
                                            <img src="<%= otherParticipant?.profilePhoto || '/images/default-avatar.png' %>" 
                                                class="w-14 h-14 rounded-full object-cover ring-2 ring-white shadow-sm" 
                                                alt="<%= getUserName(otherParticipant) %>">
                                            <% if (chat.unreadCount && chat.unreadCount > 0) { %>
                                                <span class="absolute -top-1 -right-1 bg-red-500 text-white text-xs w-6 h-6 rounded-full flex items-center justify-center font-bold shadow-lg">
                                                    <%= chat.unreadCount > 9 ? '9+' : chat.unreadCount %>
                                                </span>
                                            <% } %>
                                            <span class="absolute bottom-0 right-0 w-4 h-4 bg-gray-300 border-2 border-white rounded-full"></span>
                                        </div>

                                        <!-- Chat Info -->
                                        <div class="flex-1 min-w-0">
                                            <div class="flex items-baseline justify-between mb-1">
                                                <h3 class="font-semibold text-gray-900 truncate text-base">
                                                    <%= otherParticipant?.name || 'Unknown User' %>
                                                </h3>
                                                <% if (lastMsg) { %>
                                                    <span class="text-xs text-gray-500 ml-2 flex-shrink-0">
                                                        <%= new Date(chat.lastMessageAt).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }) %>
                                                    </span>
                                                <% } %>
                                            </div>

                                            <!-- Booking Info -->
                                            <% if (chat.booking) { %>
                                                <p class="text-xs text-gray-500 mb-1 flex items-center">
                                                    <i class="fas fa-car text-primary mr-1"></i>
                                                    <span class="truncate">Ride Booking</span>
                                                </p>
                                            <% } %>

                                            <!-- Last Message Preview -->
                                            <% if (lastMsg) { %>
                                                <p class="text-sm <%= chat.unreadCount > 0 ? 'text-gray-900 font-semibold' : 'text-gray-600' %> truncate">
                                                    <% if (lastMsg.sender && lastMsg.sender._id && lastMsg.sender._id.toString() === user._id.toString()) { %>
                                                        <i class="fas fa-check-double text-blue-500 mr-1 text-xs"></i>
                                                    <% } %>
                                                    <%= lastMsg.content %>
                                                </p>
                                            <% } else { %>
                                                <p class="text-sm text-gray-400 italic">No messages yet</p>
                                            <% } %>
                                        </div>
                                    </div>
                                </a>
                            <% }); %>
                        </div>
                    <% } else { %>
                        <!-- Empty State -->
                        <div class="flex flex-col items-center justify-center h-full p-8 text-center">
                            <div class="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                                <i class="fas fa-inbox text-gray-300 text-4xl"></i>
                            </div>
                            <h3 class="text-lg font-semibold text-gray-700 mb-2">No conversations yet</h3>
                            <p class="text-sm text-gray-500 max-w-xs">
                                Start booking rides to chat with drivers and passengers
                            </p>
                        </div>
                    <% } %>
                </div>
            </div>

            <!-- Chat Area -->
            <div class="flex-1 flex flex-col bg-gray-50 <%= currentChat ? 'flex' : 'hidden md:flex' %>">
                <% if (currentChat) { %>
                    <% 
                    const otherParticipant = currentChat.participants.find(p => p._id.toString() !== user._id.toString());
                    %>
                    
                    <!-- Chat Header -->
                    <div class="px-6 py-4 bg-white border-b border-gray-200 flex items-center justify-between shadow-sm">
                        <div class="flex items-center space-x-4 flex-1">
                            <!-- Back Button (Mobile) -->
                            <a href="/chat/new" class="md:hidden text-gray-600 hover:text-primary transition">
                                <i class="fas fa-arrow-left text-xl"></i>
                            </a>

                            <!-- User Info -->
                            <div class="relative">
                                <img src="<%= otherParticipant?.profilePhoto || '/images/default-avatar.png' %>" 
                                    class="w-12 h-12 rounded-full object-cover ring-2 ring-primary shadow-sm" 
                                    alt="<%= getUserName(otherParticipant) %>">
                                <span class="absolute bottom-0 right-0 w-3 h-3 bg-gray-300 border-2 border-white rounded-full"></span>
                            </div>
                            
                            <div class="flex-1 min-w-0">
                                <h3 class="font-bold text-gray-900 text-lg">
                                    <%= otherParticipant?.name || 'Unknown User' %>
                                </h3>
                                <p class="text-sm text-gray-500">
                                    <% if (currentChat.booking) { %>
                                        <i class="fas fa-circle text-xs text-green-500 mr-1"></i>Active Booking
                                    <% } else { %>
                                        <i class="fas fa-circle text-xs text-gray-400 mr-1"></i>Offline
                                    <% } %>
                                </p>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="flex items-center space-x-2">
                            <% if (otherParticipant?.phoneNumber) { %>
                                <a href="tel:<%= otherParticipant.phoneNumber %>" 
                                    class="p-2.5 text-primary hover:bg-green-50 rounded-lg transition"
                                    title="Call">
                                    <i class="fas fa-phone text-lg"></i>
                                </a>
                            <% } %>
                            <% if (currentChat.booking) { %>
                                <a href="/bookings/<%= currentChat.booking._id %>" 
                                    class="hidden sm:flex px-4 py-2 bg-primary hover:bg-green-700 text-white rounded-lg transition text-sm font-semibold items-center"
                                    title="View Booking">
                                    <i class="fas fa-car mr-2"></i>View Ride
                                </a>
                            <% } %>
                            <button class="p-2.5 text-gray-600 hover:bg-gray-100 rounded-lg transition">
                                <i class="fas fa-ellipsis-v"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Messages Area -->
                    <div id="messagesArea" class="flex-1 overflow-y-auto p-6 space-y-4">
                        <!-- Loading Spinner -->
                        <div id="loadingMessages" class="flex flex-col items-center justify-center h-full">
                            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mb-4"></div>
                            <p class="text-gray-600 font-medium">Loading messages...</p>
                        </div>
                    </div>

                    <!-- Typing Indicator -->
                    <div id="typingIndicator" class="px-6 py-2 hidden">
                        <div class="flex items-center space-x-2 text-sm text-gray-500">
                            <div class="flex space-x-1">
                                <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0s"></div>
                                <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
                                <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.4s"></div>
                            </div>
                            <span><%= getUserName(otherParticipant) %> is typing...</span>
                        </div>
                    </div>

                    <!-- Message Input -->
                    <div class="px-6 py-4 bg-white border-t border-gray-200">
                        <form id="messageForm" class="flex items-end space-x-3">
                            <div class="flex-1">
                                <textarea id="messageInput" 
                                    rows="1"
                                    placeholder="Type your message..."
                                    class="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-2xl focus:ring-2 focus:ring-primary focus:border-transparent focus:bg-white resize-none transition"
                                    style="max-height: 120px;"></textarea>
                            </div>
                            <button type="submit" 
                                id="sendButton"
                                class="p-3 bg-primary hover:bg-green-700 text-white rounded-xl transition shadow-sm hover:shadow-md flex-shrink-0">
                                <i class="fas fa-paper-plane text-xl"></i>
                            </button>
                            </div>
                        </form>
                    </div>

                <% } else { %>
                    <!-- No Chat Selected -->
                    <div class="flex-1 flex flex-col items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100">
                        <div class="text-center max-w-md px-6">
                            <div class="w-32 h-32 bg-white rounded-full flex items-center justify-center mb-6 mx-auto shadow-lg">
                                <i class="fas fa-comments text-primary text-6xl"></i>
                            </div>
                            <h3 class="text-2xl font-bold text-gray-800 mb-3">Your Messages</h3>
                            <p class="text-gray-600 leading-relaxed">
                                Select a conversation from the sidebar to start messaging with riders and passengers
                            </p>
                        </div>
                    </div>
                <% } %>
            </div>
        </div>
    </div>
</div>

<% if (currentChat) { %>
<!-- Socket.IO Client Library -->
<script src="/socket.io/socket.io.js"></script>
<script>
// Initialize Socket.IO connection
const socket = io({
    auth: {
        userId: '<%= user._id %>'
    }
});

const chatId = '<%= currentChat._id %>';
const userId = '<%= user._id %>';
const userName = '<%= getUserName(user) %>';
const userPhoto = '<%= user.profilePhoto || "/images/default-avatar.png" %>';
const messagesArea = document.getElementById('messagesArea');
const messageForm = document.getElementById('messageForm');
const messageInput = document.getElementById('messageInput');
const sendButton = document.getElementById('sendButton');
const typingIndicator = document.getElementById('typingIndicator');

let typingTimeout;
let isTyping = false;

// Auto-resize textarea
messageInput.addEventListener('input', function() {
    this.style.height = 'auto';
    this.style.height = Math.min(this.scrollHeight, 120) + 'px';
    
    // Emit typing indicator
    if (!isTyping && this.value.trim().length > 0) {
        isTyping = true;
        socket.emit('typing-start', { chatId, userId });
    }
    
    clearTimeout(typingTimeout);
    typingTimeout = setTimeout(() => {
        isTyping = false;
        socket.emit('typing-stop', { chatId, userId });
    }, 1000);
});

// Load messages
async function loadMessages() {
    console.log('🔵 [Load] Starting to load messages for chat:', chatId);
    try {
        const response = await fetch(`/chat/api/${chatId}/messages`);
        console.log('🔵 [Load] Response status:', response.status);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('🔵 [Load] Received data:', data);
        
        document.getElementById('loadingMessages')?.remove();
        displayMessages(data.messages || []);
        scrollToBottom();
        console.log('✅ [Load] Messages loaded successfully');
    } catch (error) {
        console.error('❌ [Load] Failed to load messages:', error);
        document.getElementById('loadingMessages')?.remove();
        messagesArea.innerHTML = `
            <div class="flex flex-col items-center justify-center h-full text-center">
                <i class="fas fa-exclamation-triangle text-red-400 text-5xl mb-4"></i>
                <p class="text-red-600 font-semibold">Failed to load messages</p>
                <p class="text-gray-500 text-sm mt-2">${error.message}</p>
                <button onclick="loadMessages()" class="mt-4 px-4 py-2 bg-primary text-white rounded-lg hover:bg-green-700 transition">
                    <i class="fas fa-redo mr-2"></i>Try Again
                </button>
            </div>
        `;
    }
}

function displayMessages(messages) {
    console.log('🔵 [Display] Displaying messages, count:', messages?.length);
    
    if (!messages || messages.length === 0) {
        console.log('🔵 [Display] No messages to display');
        messagesArea.innerHTML = `
            <div class="flex flex-col items-center justify-center h-full text-center">
                <div class="w-20 h-20 bg-white rounded-full flex items-center justify-center mb-4 shadow-lg">
                    <i class="fas fa-comment text-gray-300 text-4xl"></i>
                </div>
                <p class="text-gray-600 font-semibold text-lg mb-2">No messages yet</p>
                <p class="text-gray-500 text-sm">Send a message to start the conversation!</p>
            </div>
        `;
        return;
    }

    let lastDate = null;
    messagesArea.innerHTML = messages.map(msg => {
        const isMine = msg.sender._id === userId;
        const msgDate = new Date(msg.timestamp);
        const time = msgDate.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });
        const date = msgDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
        
        let dateHeader = '';
        if (date !== lastDate) {
            lastDate = date;
            const today = new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
            const yesterday = new Date(Date.now() - 86400000).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
            
            let displayDate = date;
            if (date === today) displayDate = 'Today';
            else if (date === yesterday) displayDate = 'Yesterday';
            
            dateHeader = `
                <div class="flex items-center justify-center my-6">
                    <span class="px-4 py-2 bg-white text-gray-600 text-xs font-semibold rounded-full shadow-sm">
                        ${displayDate}
                    </span>
                </div>
            `;
        }
        
        return `
            ${dateHeader}
            <div class="flex ${isMine ? 'justify-end' : 'justify-start'} mb-2 message-item" data-id="${msg._id}">
                <div class="flex ${isMine ? 'flex-row-reverse' : 'flex-row'} items-end space-x-2 max-w-xs lg:max-w-md" style="max-width: 70%;">
                    ${!isMine ? `
                        <img src="${msg.sender.profilePhoto || '/images/default-avatar.png'}" 
                            class="w-8 h-8 rounded-full object-cover shadow-sm flex-shrink-0" 
                            alt="${msg.sender.name}">
                    ` : ''}
                    <div class="${isMine ? 'mr-2' : 'ml-2'}">
                        <div class="px-4 py-3 rounded-2xl shadow-sm ${isMine 
                            ? 'bg-primary text-white rounded-br-sm' 
                            : 'bg-white text-gray-800 border border-gray-100 rounded-bl-sm'}">
                            <p class="break-words text-sm leading-relaxed">${escapeHtml(msg.content)}</p>
                        </div>
                        <div class="flex items-center ${isMine ? 'justify-end' : 'justify-start'} mt-1 px-2">
                            <p class="text-xs text-gray-500">${time}</p>
                            ${isMine ? '<i class="fas fa-check-double text-blue-500 ml-2 text-xs"></i>' : ''}
                        </div>
                    </div>
                </div>
            </div>
        `;
    }).join('');
}

function escapeHtml(text) {
    const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return text.replace(/[&<>"']/g, m => map[m]);
}

function scrollToBottom(smooth = false) {
    messagesArea.scrollTo({
        top: messagesArea.scrollHeight,
        behavior: smooth ? 'smooth' : 'auto'
    });
}

// Send message
messageForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const content = messageInput.value.trim();
    if (!content) return;
    
    // Disable input while sending
    messageInput.disabled = true;
    sendButton.disabled = true;
    
    // Optimistically add message to display
    const tempId = 'temp-' + Date.now();
    const optimisticMessage = {
        _id: tempId,
        content: content,
        sender: {
            _id: userId,
            name: userName,
            profilePhoto: userPhoto
        },
        timestamp: new Date().toISOString(),
        type: 'TEXT'
    };
    
    console.log('🔵 [Send] Optimistically adding message to display');
    addMessageToDisplay(optimisticMessage);
    scrollToBottom(true);
    
    // Clear input immediately for better UX
    messageInput.value = '';
    messageInput.style.height = 'auto';
    
    try {
        console.log('🔵 [Send] Sending message to server');
        const response = await fetch(`/chat/api/${chatId}/messages`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ content })
        });
        
        if (response.ok) {
            const result = await response.json();
            console.log('✅ [Send] Message sent successfully:', result);
            
            // Replace temp message with real one
            if (result.message && result.message._id) {
                const tempMsg = messagesArea.querySelector(`[data-id="${tempId}"]`);
                if (tempMsg) {
                    tempMsg.setAttribute('data-id', result.message._id);
                    console.log('✅ [Send] Updated temp message with real ID');
                }
            }
            
            messageInput.focus();
            
            // Stop typing indicator
            socket.emit('typing-stop', { chatId });
            isTyping = false;
        } else {
            console.error('❌ [Send] Failed to send message:', response.status);
            LANEApp.showAlert('Failed to send message', 'error');
            
            // Remove optimistic message on error
            const tempMsg = messagesArea.querySelector(`[data-id="${tempId}"]`);
            if (tempMsg) tempMsg.remove();
        }
    } catch (error) {
        console.error('❌ [Send] Error:', error);
        LANEApp.showAlert('Failed to send message', 'error');
        
        // Remove optimistic message on error
        const tempMsg = messagesArea.querySelector(`[data-id="${tempId}"]`);
        if (tempMsg) tempMsg.remove();
    } finally {
        messageInput.disabled = false;
        sendButton.disabled = false;
    }
});

// Socket.IO real-time messaging
console.log('✅ Socket.IO initialized');
console.log('🔵 Joining chat room:', chatId);

// Wait for socket to connect before joining room
socket.on('connect', () => {
    console.log('✅ Socket connected, joining chat room');
    socket.emit('join-chat', chatId);
    socket.emit('join-user', userId);
});

// Confirm join
socket.on('chat-joined', (data) => {
    console.log('✅ [Socket] Successfully joined chat room:', data.chatId);
});

socket.on('disconnect', () => {
    console.log('⚠️ Socket disconnected');
});

socket.on('reconnect', () => {
    console.log('✅ Socket reconnected, rejoining chat room');
    socket.emit('join-chat', chatId);
});

// Listen for new messages
socket.on('new-message', (data) => {
        console.log('🔵 [Socket] Received new-message event:', data);
        console.log('🔵 [Socket] Data chatId:', data.chatId, 'Type:', typeof data.chatId);
        console.log('🔵 [Socket] Current chatId:', chatId, 'Type:', typeof chatId);
        console.log('🔵 [Socket] Message sender:', data.message?.sender?._id, 'Current user:', userId);
        
        if (data.chatId == chatId || data.chatId === chatId) {
            console.log('✅ [Socket] Message is for this chat');
            
            // Skip if this is my own message (already added optimistically)
            if (data.message && data.message.sender._id === userId) {
                console.log('⏭️ [Socket] Skipping own message (already displayed optimistically)');
                return;
            }
            
            // Add message from other user
            if (data.message) {
                console.log('✅ [Socket] Adding message from other user');
                addMessageToDisplay(data.message);
                scrollToBottom(true);
                
                // Play notification sound for other user's messages
                console.log('🔔 [Socket] Message from other user');
                // Optional: Play sound here
                // new Audio('/sounds/notification.mp3').play();
            } else {
                // Fallback: reload all messages
                console.log('⚠️ [Socket] No message object, reloading all messages');
                loadMessages();
                scrollToBottom(true);
            }
        } else {
            console.log('⚠️ [Socket] Message not for this chat, ignoring');
        }
    });
    
    // Listen for typing indicators
    socket.on('user-typing', (data) => {
        console.log('⌨️ [Socket] User typing:', data);
        if (data.chatId == chatId && data.userId !== userId) {
            typingIndicator.classList.remove('hidden');
        }
    });
    
    socket.on('user-stopped-typing', (data) => {
        console.log('⌨️ [Socket] User stopped typing:', data);
        if (data.chatId == chatId) {
            typingIndicator.classList.add('hidden');
        }
    });

// Add message to display (real-time)
function addMessageToDisplay(msg) {
    console.log('🔵 [Display] Adding message to display:', msg);
    
    const isMine = msg.sender._id === userId;
    const msgDate = new Date(msg.timestamp);
    const time = msgDate.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });
    const date = msgDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
    
    // Check if we need date separator
    const lastMessage = messagesArea.lastElementChild;
    const today = new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
    
    let needsDateSeparator = false;
    if (!lastMessage || lastMessage.querySelector('.date-separator')) {
        needsDateSeparator = true;
    }
    
    // Create message HTML
    const messageHTML = `
        <div class="flex ${isMine ? 'justify-end' : 'justify-start'} mb-2 message-item" data-id="${msg._id}">
            <div class="flex ${isMine ? 'flex-row-reverse' : 'flex-row'} items-end space-x-2 max-w-xs lg:max-w-md" style="max-width: 70%;">
                ${!isMine ? `
                    <img src="${msg.sender.profilePhoto || '/images/default-avatar.png'}" 
                        class="w-8 h-8 rounded-full object-cover shadow-sm flex-shrink-0" 
                        alt="${msg.sender.name}">
                ` : ''}
                <div class="${isMine ? 'mr-2' : 'ml-2'}">
                    <div class="px-4 py-3 rounded-2xl shadow-sm ${isMine 
                        ? 'bg-primary text-white rounded-br-sm' 
                        : 'bg-white text-gray-800 border border-gray-100 rounded-bl-sm'}">
                        <p class="break-words text-sm leading-relaxed">${escapeHtml(msg.content)}</p>
                    </div>
                    <div class="flex items-center ${isMine ? 'justify-end' : 'justify-start'} mt-1 px-2">
                        <p class="text-xs text-gray-500">${time}</p>
                        ${isMine ? '<i class="fas fa-check-double text-blue-500 ml-2 text-xs"></i>' : ''}
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // Check for duplicates
    const existingMsg = messagesArea.querySelector(`[data-id="${msg._id}"]`);
    if (existingMsg) {
        console.log('⚠️ [Display] Message already exists, skipping');
        return;
    }
    
    messagesArea.insertAdjacentHTML('beforeend', messageHTML);
    console.log('✅ [Display] Message added to display');
}

// Wait for DOM to be ready
document.addEventListener('DOMContentLoaded', function() {
    console.log('✅ [Init] DOM loaded, initializing chat');
    
    // Load messages on page load
    loadMessages();
    
    console.log('✅ [Init] Chat initialized successfully');
});

// Enter to send (Shift+Enter for new line)
messageInput.addEventListener('keydown', function(e) {
    if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        messageForm.dispatchEvent(new Event('submit'));
    }
});

// Mark messages as read when viewing
window.addEventListener('focus', () => {
    fetch(`/chat/api/${chatId}/read`, { method: 'POST' })
        .catch(err => console.error('Mark read error:', err));
});
</script>
<% } %>

<script>
// Search chats
document.getElementById('searchChats')?.addEventListener('input', function(e) {
    const search = e.target.value.toLowerCase();
    document.querySelectorAll('.chat-item').forEach(item => {
        const name = item.dataset.name?.toLowerCase() || '';
        item.style.display = name.includes(search) ? 'block' : 'none';
    });
});
</script>

<style>
/* Custom scrollbar */
#messagesArea::-webkit-scrollbar {
    width: 6px;
}

#messagesArea::-webkit-scrollbar-track {
    background: transparent;
}

#messagesArea::-webkit-scrollbar-thumb {
    background: #10b981;
    border-radius: 3px;
}

#messagesArea::-webkit-scrollbar-thumb:hover {
    background: #059669;
}

/* Smooth scrolling */
#messagesArea {
    scroll-behavior: smooth;
}

/* Animation for typing indicator */
@keyframes bounce {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-5px); }
}

.animate-bounce {
    animation: bounce 0.6s infinite;
}
</style>

<%- include('../partials/footer') %>
