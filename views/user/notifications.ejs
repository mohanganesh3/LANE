<%- include('../partials/header') %>

<div class="container mx-auto px-4 py-8 max-w-4xl">
    <!-- Header -->
    <div class="flex justify-between items-center mb-8">
        <div>
            <h1 class="text-3xl font-bold text-gray-800">Notifications</h1>
            <p class="text-gray-600 mt-2">Stay updated with all your ride activities</p>
        </div>
        <button onclick="markAllAsRead()" class="bg-primary text-white px-6 py-2 rounded-lg hover:bg-green-600 transition">
            <i class="fas fa-check-double mr-2"></i>
            Mark All as Read
        </button>
    </div>

    <!-- Filter Tabs -->
    <div class="flex space-x-4 mb-6 border-b border-gray-200">
        <button onclick="filterNotifications('all')" class="filter-tab px-4 py-2 font-medium text-gray-600 hover:text-primary border-b-2 border-transparent active">
            All
        </button>
        <button onclick="filterNotifications('unread')" class="filter-tab px-4 py-2 font-medium text-gray-600 hover:text-primary border-b-2 border-transparent">
            Unread
        </button>
        <button onclick="filterNotifications('booking')" class="filter-tab px-4 py-2 font-medium text-gray-600 hover:text-primary border-b-2 border-transparent">
            Bookings
        </button>
        <button onclick="filterNotifications('ride')" class="filter-tab px-4 py-2 font-medium text-gray-600 hover:text-primary border-b-2 border-transparent">
            Rides
        </button>
    </div>

    <!-- Notifications List -->
    <div id="notificationsContainer" class="space-y-3">
        <!-- Loading state -->
        <div class="text-center py-12">
            <i class="fas fa-spinner fa-spin text-4xl text-gray-400"></i>
            <p class="text-gray-600 mt-4">Loading notifications...</p>
        </div>
    </div>

    <!-- Empty State -->
    <div id="emptyState" class="hidden text-center py-16">
        <i class="fas fa-bell-slash text-6xl text-gray-300 mb-4"></i>
        <h3 class="text-xl font-semibold text-gray-700 mb-2">No notifications</h3>
        <p class="text-gray-500">You're all caught up! Check back later for updates.</p>
    </div>
</div>

<script>
let allNotifications = [];
let currentFilter = 'all';

// Load all notifications on page load
document.addEventListener('DOMContentLoaded', () => {
    loadAllNotifications();
});

async function loadAllNotifications() {
    try {
        const response = await fetch('/api/notifications/all');
        const data = await response.json();
        
        if (data.success) {
            allNotifications = data.notifications;
            displayNotifications();
        }
    } catch (error) {
        console.error('Failed to load notifications:', error);
        document.getElementById('notificationsContainer').innerHTML = `
            <div class="text-center py-12 text-red-500">
                <i class="fas fa-exclamation-circle text-4xl mb-4"></i>
                <p>Failed to load notifications</p>
            </div>
        `;
    }
}

function displayNotifications() {
    const container = document.getElementById('notificationsContainer');
    const emptyState = document.getElementById('emptyState');
    
    // Filter notifications based on current filter
    let filteredNotifs = allNotifications;
    
    if (currentFilter === 'unread') {
        filteredNotifs = allNotifications.filter(n => !n.isRead);
    } else if (currentFilter === 'booking') {
        filteredNotifs = allNotifications.filter(n => n.type.includes('BOOKING'));
    } else if (currentFilter === 'ride') {
        filteredNotifs = allNotifications.filter(n => n.type.includes('RIDE'));
    }
    
    if (filteredNotifs.length === 0) {
        container.classList.add('hidden');
        emptyState.classList.remove('hidden');
        return;
    }
    
    container.classList.remove('hidden');
    emptyState.classList.add('hidden');
    
    container.innerHTML = filteredNotifs.map(notif => `
        <div class="bg-white rounded-lg shadow-md p-5 hover:shadow-lg transition cursor-pointer ${!notif.isRead ? 'border-l-4 border-primary bg-blue-50' : ''}"
             onclick="handleNotificationClick('${notif._id}', '${getNotificationUrl(notif)}')">
            <div class="flex items-start space-x-4">
                <div class="flex-shrink-0">
                    <div class="w-12 h-12 rounded-full ${getNotificationColor(notif.type)} flex items-center justify-center">
                        <i class="fas ${getNotificationIcon(notif.type)} text-white text-xl"></i>
                    </div>
                </div>
                <div class="flex-1">
                    <div class="flex justify-between items-start">
                        <div>
                            <h3 class="font-semibold text-gray-800">${notif.title}</h3>
                            <p class="text-gray-600 text-sm mt-1">${notif.message}</p>
                        </div>
                        ${!notif.isRead ? '<span class="w-3 h-3 bg-blue-500 rounded-full"></span>' : ''}
                    </div>
                    <div class="flex items-center space-x-4 mt-3 text-xs text-gray-500">
                        <span><i class="far fa-clock mr-1"></i>${LANEApp.timeAgo(notif.createdAt)}</span>
                        ${notif.isRead ? `<span><i class="fas fa-check mr-1"></i>Read</span>` : ''}
                    </div>
                </div>
            </div>
        </div>
    `).join('');
}

function filterNotifications(filter) {
    currentFilter = filter;
    
    // Update active tab
    document.querySelectorAll('.filter-tab').forEach(tab => {
        tab.classList.remove('active', 'border-primary', 'text-primary');
    });
    event.target.classList.add('active', 'border-primary', 'text-primary');
    
    displayNotifications();
}

async function handleNotificationClick(notificationId, url) {
    try {
        // Mark as read
        await fetch(`/api/notifications/${notificationId}/read`, { method: 'POST' });
        
        // Update local data
        const notif = allNotifications.find(n => n._id === notificationId);
        if (notif) notif.isRead = true;
        
        // Navigate
        if (url && url !== '#') {
            window.location.href = url;
        } else {
            displayNotifications();
        }
    } catch (error) {
        console.error('Failed to handle notification click:', error);
    }
}

async function markAllAsRead() {
    try {
        const response = await fetch('/api/notifications/mark-all-read', { method: 'POST' });
        const data = await response.json();
        
        if (data.success) {
            allNotifications.forEach(n => n.isRead = true);
            displayNotifications();
            LANEApp.showAlert('All notifications marked as read', 'success');
        }
    } catch (error) {
        console.error('Failed to mark all as read:', error);
        LANEApp.showAlert('Failed to mark notifications as read', 'error');
    }
}

function getNotificationIcon(type) {
    const icons = {
        'BOOKING_REQUEST': 'fa-ticket-alt',
        'BOOKING_ACCEPTED': 'fa-check-circle',
        'BOOKING_REJECTED': 'fa-times-circle',
        'BOOKING_CANCELLED': 'fa-ban',
        'RIDE_STARTED': 'fa-play-circle',
        'RIDE_COMPLETED': 'fa-flag-checkered',
        'PAYMENT_RECEIVED': 'fa-money-bill-wave',
        'REVIEW_RECEIVED': 'fa-star',
        'MESSAGE_RECEIVED': 'fa-comment',
        'SOS_ALERT': 'fa-exclamation-triangle'
    };
    return icons[type] || 'fa-bell';
}

function getNotificationColor(type) {
    const colors = {
        'BOOKING_REQUEST': 'bg-blue-500',
        'BOOKING_ACCEPTED': 'bg-green-500',
        'BOOKING_REJECTED': 'bg-red-500',
        'BOOKING_CANCELLED': 'bg-gray-500',
        'RIDE_STARTED': 'bg-purple-500',
        'RIDE_COMPLETED': 'bg-green-600',
        'PAYMENT_RECEIVED': 'bg-yellow-500',
        'REVIEW_RECEIVED': 'bg-orange-500',
        'MESSAGE_RECEIVED': 'bg-indigo-500',
        'SOS_ALERT': 'bg-red-600'
    };
    return colors[type] || 'bg-gray-500';
}

function getNotificationUrl(notif) {
    if (notif.data?.bookingId) return `/bookings/${notif.data.bookingId}`;
    if (notif.data?.rideId) return `/rides/${notif.data.rideId}`;
    return '#';
}
</script>

<style>
.filter-tab.active {
    color: #10b981;
    border-bottom-color: #10b981;
}
</style>

<%- include('../partials/footer') %>
