<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Emergency Contacts - LANE Carpool</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/css/style.css">
</head>

<body class="bg-gray-50">
    <%- include('../partials/navbar.ejs', {user}) %>

        <div class="container mx-auto px-4 py-8 max-w-4xl">
            <!-- Header -->
            <div class="bg-white rounded-lg shadow-md p-6 mb-6">
                <h1 class="text-3xl font-bold text-gray-800 mb-2 flex items-center">
                    <i class="fas fa-user-shield text-blue-600 mr-3"></i>
                    Emergency Contacts
                </h1>
                <p class="text-gray-600">
                    Add trusted contacts who will be notified automatically if you trigger an SOS alert.
                    We recommend adding at least 2-3 emergency contacts for your safety.
                </p>
            </div>

            <!-- Info Banner -->
            <div class="bg-blue-50 border-l-4 border-blue-500 rounded-lg shadow-sm p-6 mb-6">
                <h3 class="font-semibold text-blue-800 mb-2 flex items-center">
                    <i class="fas fa-info-circle mr-2"></i>
                    How it Works
                </h3>
                <ul class="text-sm text-blue-700 space-y-1 ml-6">
                    <li class="list-disc">When you trigger SOS, all your emergency contacts receive immediate SMS and
                        email alerts</li>
                    <li class="list-disc">They get your live location link, ride details, and driver information</li>
                    <li class="list-disc">Contacts are verified via OTP to ensure they're reachable</li>
                    <li class="list-disc">Set one contact as "Primary" for priority notifications</li>
                </ul>
            </div>

            <!-- Add New Contact Form -->
            <div class="bg-white rounded-lg shadow-md p-6 mb-6">
                <h2 class="text-xl font-bold text-gray-800 mb-4 flex items-center">
                    <i class="fas fa-plus-circle text-green-600 mr-2"></i>
                    Add New Emergency Contact
                </h2>
                <form id="addContactForm" class="space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Full Name <span class="text-red-500">*</span>
                            </label>
                            <input type="text" id="contactName" required
                                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                placeholder="John Doe">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Relationship <span class="text-red-500">*</span>
                            </label>
                            <select id="contactRelationship" required
                                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                <option value="">Select...</option>
                                <option value="Parent">Parent</option>
                                <option value="Sibling">Sibling</option>
                                <option value="Spouse">Spouse</option>
                                <option value="Partner">Partner</option>
                                <option value="Friend">Friend</option>
                                <option value="Colleague">Colleague</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Phone Number <span class="text-red-500">*</span>
                            </label>
                            <input type="tel" id="contactPhone" required
                                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                placeholder="+91 9876543210">
                            <p class="text-xs text-gray-500 mt-1">Include country code (e.g., +91)</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Email Address (Optional)
                            </label>
                            <input type="email" id="contactEmail"
                                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                placeholder="john@example.com">
                        </div>
                    </div>

                    <div class="flex items-center">
                        <input type="checkbox" id="contactPrimary"
                            class="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500">
                        <label for="contactPrimary" class="ml-2 text-sm text-gray-700">
                            Set as primary contact (receives alerts first)
                        </label>
                    </div>

                    <button type="submit"
                        class="w-full md:w-auto px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-lg transition">
                        <i class="fas fa-save mr-2"></i>Add Contact
                    </button>
                </form>
            </div>

            <!-- Existing Contacts List -->
            <div class="bg-white rounded-lg shadow-md p-6">
                <h2 class="text-xl font-bold text-gray-800 mb-4 flex items-center justify-between">
                    <span>
                        <i class="fas fa-users text-blue-600 mr-2"></i>
                        Your Emergency Contacts (<span id="contactCount">0</span>/5)
                    </span>
                    <span class="text-sm font-normal text-gray-500">Maximum 5 contacts</span>
                </h2>

                <div id="contactsList">
                    <!-- Contacts will be loaded here -->
                    <div class="text-center py-8">
                        <i class="fas fa-spinner fa-spin text-4xl text-gray-400 mb-4"></i>
                        <p class="text-gray-500">Loading your contacts...</p>
                    </div>
                </div>
            </div>

            <!-- Safety Tips -->
            <div class="bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg shadow-md p-6 mt-6">
                <h3 class="font-bold text-purple-800 mb-3 flex items-center">
                    <i class="fas fa-lightbulb text-yellow-500 mr-2"></i>
                    Safety Tips
                </h3>
                <ul class="text-sm text-purple-700 space-y-2 ml-6">
                    <li class="list-disc">Choose contacts who are available 24/7 and can respond quickly</li>
                    <li class="list-disc">Inform your contacts that they're listed as emergency contacts</li>
                    <li class="list-disc">Keep their contact information up to date</li>
                    <li class="list-disc">Verify their phone numbers to ensure SMS alerts work</li>
                    <li class="list-disc">Consider adding contacts from different locations</li>
                </ul>
            </div>
        </div>

        <!-- Verification Modal -->
        <div id="verificationModal"
            class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
            <div class="bg-white rounded-2xl max-w-md w-full p-8">
                <h3 class="text-2xl font-bold text-gray-800 mb-4">Verify Contact</h3>
                <p class="text-gray-600 mb-6">
                    We've sent a verification code to <strong id="verifyPhone"></strong>
                </p>
                <input type="text" id="verifyOTP" maxlength="6"
                    class="w-full px-4 py-3 border-2 border-gray-300 rounded-lg text-center text-2xl font-bold tracking-widest mb-4"
                    placeholder="000000">
                <div class="flex gap-3">
                    <button onclick="cancelVerification()"
                        class="flex-1 px-4 py-3 bg-gray-200 hover:bg-gray-300 text-gray-800 rounded-lg font-semibold transition">
                        Cancel
                    </button>
                    <button onclick="submitVerification()"
                        class="flex-1 px-4 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-semibold transition">
                        Verify
                    </button>
                </div>
                <button onclick="resendOTP()" class="w-full mt-4 text-sm text-blue-600 hover:underline">
                    Resend Code
                </button>
            </div>
        </div>

        <%- include('../partials/footer.ejs') %>

            <script>
                let contacts = [];
                let pendingContactId = null;

                // Load contacts on page load
                document.addEventListener('DOMContentLoaded', loadContacts);

                // Add contact form submission
                document.getElementById('addContactForm').addEventListener('submit', async (e) => {
                    e.preventDefault();
                    await addContact();
                });

                // Load existing contacts
                async function loadContacts() {
                    try {
                        const response = await fetch('/user/emergency-contacts/list');
                        const data = await response.json();

                        if (data.success) {
                            contacts = data.contacts || [];
                            renderContacts();
                        }
                    } catch (error) {
                        console.error('Error loading contacts:', error);
                        document.getElementById('contactsList').innerHTML = `
                    <div class="text-center py-8 text-red-600">
                        <i class="fas fa-exclamation-triangle text-4xl mb-4"></i>
                        <p>Failed to load contacts. Please refresh the page.</p>
                    </div>
                `;
                    }
                }

                // Render contacts list
                function renderContacts() {
                    const container = document.getElementById('contactsList');
                    document.getElementById('contactCount').textContent = contacts.length;

                    if (contacts.length === 0) {
                        container.innerHTML = `
                    <div class="text-center py-8">
                        <i class="fas fa-user-plus text-4xl text-gray-300 mb-4"></i>
                        <p class="text-gray-500">No emergency contacts added yet.</p>
                        <p class="text-sm text-gray-400 mt-2">Add your first contact above to get started.</p>
                    </div>
                `;
                        return;
                    }

                    container.innerHTML = contacts.map(contact => `
                <div class="border border-gray-200 rounded-lg p-4 mb-3 hover:shadow-md transition">
                    <div class="flex items-start justify-between">
                        <div class="flex-1">
                            <div class="flex items-center gap-2 mb-2">
                                <h3 class="font-semibold text-gray-800">${contact.name}</h3>
                                ${contact.isPrimary ? '<span class="px-2 py-1 bg-blue-100 text-blue-700 text-xs font-semibold rounded">Primary</span>' : ''}
                                ${contact.verified ? '<i class="fas fa-check-circle text-green-600" title="Verified"></i>' : '<i class="fas fa-exclamation-circle text-yellow-600" title="Not Verified"></i>'}
                            </div>
                            <p class="text-sm text-gray-600 mb-1">
                                <i class="fas fa-user mr-2"></i>${contact.relationship || 'Not specified'}
                            </p>
                            <p class="text-sm text-gray-600 mb-1">
                                <i class="fas fa-phone mr-2"></i>${contact.phone}
                            </p>
                            ${contact.email ? `<p class="text-sm text-gray-600"><i class="fas fa-envelope mr-2"></i>${contact.email}</p>` : ''}
                        </div>
                        <div class="flex flex-col gap-2">
                            ${!contact.verified ? `
                                <button onclick="verifyContact('${contact._id}', '${contact.phone}')" 
                                    class="px-3 py-1 bg-yellow-500 hover:bg-yellow-600 text-white text-xs rounded transition">
                                    <i class="fas fa-shield-alt mr-1"></i>Verify
                                </button>
                            ` : ''}
                            ${!contact.isPrimary ? `
                                <button onclick="setPrimary('${contact._id}')" 
                                    class="px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white text-xs rounded transition">
                                    <i class="fas fa-star mr-1"></i>Set Primary
                                </button>
                            ` : ''}
                            <button onclick="deleteContact('${contact._id}')" 
                                class="px-3 py-1 bg-red-500 hover:bg-red-600 text-white text-xs rounded transition">
                                <i class="fas fa-trash mr-1"></i>Delete
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
                }

                // Add new contact
                async function addContact() {
                    if (contacts.length >= 5) {
                        alert('You can only add up to 5 emergency contacts.');
                        return;
                    }

                    const contactData = {
                        name: document.getElementById('contactName').value.trim(),
                        relationship: document.getElementById('contactRelationship').value,
                        phone: document.getElementById('contactPhone').value.trim(),
                        email: document.getElementById('contactEmail').value.trim(),
                        isPrimary: document.getElementById('contactPrimary').checked
                    };

                    if (!contactData.name || !contactData.relationship || !contactData.phone) {
                        alert('Please fill in all required fields.');
                        return;
                    }

                    try {
                        const response = await fetch('/user/emergency-contacts/add', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(contactData)
                        });

                        const data = await response.json();

                        if (data.success) {
                            alert('✅ Emergency contact added successfully!');
                            document.getElementById('addContactForm').reset();
                            await loadContacts();

                            // Prompt for verification
                            if (confirm('Would you like to verify this contact now? This ensures they can receive SMS alerts.')) {
                                verifyContact(data.contact._id, data.contact.phone);
                            }
                        } else {
                            alert(data.message || 'Failed to add contact.');
                        }
                    } catch (error) {
                        console.error('Error adding contact:', error);
                        alert('Failed to add contact. Please try again.');
                    }
                }

                // Verify contact
                async function verifyContact(contactId, phone) {
                    try {
                        const response = await fetch(`/user/emergency-contacts/${contactId}/send-verification`, {
                            method: 'POST'
                        });

                        const data = await response.json();

                        if (data.success) {
                            pendingContactId = contactId;
                            document.getElementById('verifyPhone').textContent = phone;
                            document.getElementById('verificationModal').classList.remove('hidden');
                        } else {
                            alert(data.message || 'Failed to send verification code.');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Failed to send verification code. Please try again.');
                    }
                }

                // Submit verification
                async function submitVerification() {
                    const otp = document.getElementById('verifyOTP').value.trim();

                    if (!otp || otp.length !== 6) {
                        alert('Please enter a valid 6-digit code.');
                        return;
                    }

                    try {
                        const response = await fetch(`/user/emergency-contacts/${pendingContactId}/verify`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ otp })
                        });

                        const data = await response.json();

                        if (data.success) {
                            alert('✅ Contact verified successfully!');
                            document.getElementById('verificationModal').classList.add('hidden');
                            document.getElementById('verifyOTP').value = '';
                            pendingContactId = null;
                            await loadContacts();
                        } else {
                            alert(data.message || 'Verification failed. Please check the code.');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Verification failed. Please try again.');
                    }
                }

                // Cancel verification
                function cancelVerification() {
                    document.getElementById('verificationModal').classList.add('hidden');
                    document.getElementById('verifyOTP').value = '';
                    pendingContactId = null;
                }

                // Resend OTP
                async function resendOTP() {
                    if (!pendingContactId) return;
                    await verifyContact(pendingContactId, document.getElementById('verifyPhone').textContent);
                    alert('New verification code sent!');
                }

                // Set as primary contact
                async function setPrimary(contactId) {
                    try {
                        const response = await fetch(`/user/emergency-contacts/${contactId}/set-primary`, {
                            method: 'POST'
                        });

                        const data = await response.json();

                        if (data.success) {
                            alert('✅ Primary contact updated!');
                            await loadContacts();
                        } else {
                            alert(data.message || 'Failed to update primary contact.');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Failed to update. Please try again.');
                    }
                }

                // Delete contact
                async function deleteContact(contactId) {
                    if (!confirm('Are you sure you want to delete this emergency contact?')) {
                        return;
                    }

                    try {
                        const response = await fetch(`/user/emergency-contacts/${contactId}`, {
                            method: 'DELETE'
                        });

                        const data = await response.json();

                        if (data.success) {
                            alert('✅ Contact deleted successfully!');
                            await loadContacts();
                        } else {
                            alert(data.message || 'Failed to delete contact.');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Failed to delete contact. Please try again.');
                    }
                }
            </script>
</body>

</html>