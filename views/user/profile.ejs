<%- include('../partials/header') %>

    <div class="pt-20 pb-12 bg-gray-50 min-h-screen">
        <div class="container mx-auto px-4">
            <!-- Profile Header -->
            <div class="bg-white rounded-2xl shadow-lg p-8 mb-8">
                <div class="flex items-center space-x-6">
                    <div class="relative">
                        <img src="<%= user.profilePhoto || '/images/default-avatar.png' %>"
                            class="w-32 h-32 rounded-full object-cover border-4 border-primary" alt="<%= getUserName(user) %>"
                            id="profilePhotoPreview">
                        <input type="file" id="profilePhotoInput" name="profilePhoto" accept="image/*" class="hidden">
                        <button type="button" id="uploadPhotoBtn"
                            class="absolute bottom-0 right-0 bg-primary text-white w-10 h-10 rounded-full hover:bg-green-700 transition">
                            <i class="fas fa-camera"></i>
                        </button>
                    </div>

                    <div class="flex-1">
                        <h1 class="text-3xl font-bold text-gray-800 mb-2">
                            <%= getUserName(user) %>
                        </h1>
                        <p class="text-gray-600 mb-3">
                            <i class="fas fa-envelope mr-2"></i>
                            <%= user.email %>
                        </p>
                        <p class="text-gray-600 mb-3">
                            <i class="fas fa-phone mr-2"></i>
                            <%= user.phone %>
                        </p>
                        <div class="flex items-center space-x-4">
                            <span class="px-3 py-1 bg-primary text-white rounded-full text-sm font-semibold">
                                <%= user.role %>
                            </span>
                            <% if (user.emailVerified) { %>
                                <span class="text-green-600">
                                    <i class="fas fa-check-circle mr-1"></i>Email Verified
                                </span>
                                <% } %>
                                    <% if (user.phoneVerified) { %>
                                        <span class="text-blue-600">
                                            <i class="fas fa-check-circle mr-1"></i>Phone Verified
                                        </span>
                                        <% } %>
                        </div>
                    </div>

                    <div class="text-center">
                        <div class="text-3xl font-bold text-primary mb-2">
                            <%= (user.rating?.overall || 0).toFixed(1) %>
                        </div>
                        <div class="text-yellow-400 text-xl mb-2">
                            <% for(let i=1; i <=5; i++) { %>
                                <% if(i <=Math.floor(user.rating?.overall || 0)) { %>
                                    <i class="fas fa-star"></i>
                                    <% } else { %>
                                        <i class="far fa-star"></i>
                                        <% } %>
                                            <% } %>
                        </div>
                        <p class="text-gray-600 text-sm">
                            <%= user.rating?.totalRatings || 0 %> reviews
                        </p>
                    </div>
                </div>
            </div>

            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <!-- Profile Information -->
                <div class="lg:col-span-2">
                    <div class="bg-white rounded-2xl shadow-lg p-8">
                        <h2 class="text-2xl font-bold text-gray-800 mb-6">Profile Information</h2>

                        <form id="profileForm" class="space-y-6">
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label class="block text-gray-700 font-medium mb-2">First Name</label>
                                    <input type="text" name="firstName" value="<%= user.profile?.firstName || '' %>"
                                        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary">
                                </div>
                                <div>
                                    <label class="block text-gray-700 font-medium mb-2">Last Name</label>
                                    <input type="text" name="lastName" value="<%= user.profile?.lastName || '' %>"
                                        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary">
                                </div>
                            </div>

                            <div>
                                <label class="block text-gray-700 font-medium mb-2">Bio</label>
                                <textarea name="bio" rows="4"
                                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary"
                                    placeholder="Tell us about yourself..."><%= user.profile?.bio || '' %></textarea>
                            </div>

                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label class="block text-gray-700 font-medium mb-2">Date of Birth</label>
                                    <input type="date" name="dateOfBirth"
                                        value="<%= user.profile?.dateOfBirth ? new Date(user.profile.dateOfBirth).toISOString().split('T')[0] : '' %>"
                                        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary">
                                </div>
                                <div>
                                    <label class="block text-gray-700 font-medium mb-2">Gender</label>
                                    <select name="gender"
                                        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary">
                                        <option value="">Select Gender (Optional)</option>
                                        <option value="MALE" <%=user.profile?.gender==='MALE' ? 'selected' : '' %>>Male</option>
                                        <option value="FEMALE" <%=user.profile?.gender==='FEMALE' ? 'selected' : '' %>>Female</option>
                                        <option value="OTHER" <%=user.profile?.gender==='OTHER' ? 'selected' : '' %>>Other</option>
                                        <option value="PREFER_NOT_TO_SAY" <%=user.profile?.gender==='PREFER_NOT_TO_SAY' ? 'selected' : '' %>>Prefer Not to Say</option>
                                    </select>
                                </div>
                            </div>

                            <!-- Address with Autocomplete -->
                            <div>
                                <label class="block text-gray-700 font-medium mb-2">
                                    <i class="fas fa-home text-primary mr-2"></i>Address
                                </label>
                                <div class="relative">
                                    <input type="text" id="addressInput" name="addressDisplay"
                                        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary"
                                        placeholder="Type to search for your address..."
                                        value="<%= user.profile?.address?.street ? (user.profile.address.street + (user.profile.address.city ? ', ' + user.profile.address.city : '') + (user.profile.address.state ? ', ' + user.profile.address.state : '')) : '' %>"
                                        autocomplete="off">
                                    <input type="hidden" id="addressData" name="address">
                                    <div id="addressSuggestions" class="hidden absolute z-50 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg max-h-60 overflow-y-auto"></div>
                                </div>
                                <p class="text-xs text-gray-500 mt-1">
                                    <i class="fas fa-info-circle mr-1"></i>Start typing your address and select from suggestions
                                </p>
                            </div>

                            <div class="flex justify-end space-x-4">
                                <button type="button"
                                    class="px-6 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition">
                                    Cancel
                                </button>
                                <button type="submit"
                                    class="px-6 py-3 bg-primary hover:bg-green-700 text-white rounded-lg transition">
                                    <i class="fas fa-save mr-2"></i>Save Changes
                                </button>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- Sidebar -->
                <div class="space-y-6">
                    <!-- Verification Status -->
                    <div class="bg-white rounded-2xl shadow-lg p-6">
                        <h3 class="text-lg font-bold text-gray-800 mb-4">Verification</h3>
                        <div class="space-y-3">
                            <div class="flex items-center justify-between">
                                <span class="text-gray-700">
                                    <i class="fas fa-envelope mr-2"></i>Email
                                </span>
                                <% if (user.emailVerified) { %>
                                    <span class="text-green-600"><i class="fas fa-check-circle"></i> Verified</span>
                                    <% } else { %>
                                        <a href="#" class="text-primary hover:underline">Verify</a>
                                        <% } %>
                            </div>
                            <div class="flex items-center justify-between">
                                <span class="text-gray-700">
                                    <i class="fas fa-phone mr-2"></i>Phone
                                </span>
                                <% if (user.isPhoneVerified) { %>
                                    <span class="text-green-600"><i class="fas fa-check-circle"></i></span>
                                    <% } else { %>
                                        <a href="#" class="text-primary hover:underline">Verify</a>
                                        <% } %>
                            </div>
                        </div>
                    </div>

                    <!-- Member Since -->
                    <div class="bg-white rounded-2xl shadow-lg p-6">
                        <h3 class="text-lg font-bold text-gray-800 mb-4">Member Since</h3>
                        <p class="text-gray-600">
                            <i class="fas fa-calendar-alt mr-2"></i>
                            <%= new Date(user.createdAt).toLocaleDateString('en-US', { month: 'long' , year: 'numeric'
                                }) %>
                        </p>
                    </div>

                    <!-- Danger Zone -->
                    <div class="bg-white rounded-2xl shadow-lg p-6 border-2 border-red-200">
                        <h3 class="text-lg font-bold text-red-600 mb-2 flex items-center">
                            <i class="fas fa-exclamation-triangle mr-2"></i>Danger Zone
                        </h3>
                        <p class="text-xs text-gray-500 mb-4">Permanent account deletion</p>
                        
                        <div class="space-y-3">
                            <!-- Delete Account Button (Only option for users) -->
                            <button id="deleteAccountBtn"
                                class="w-full px-4 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition font-semibold flex items-center justify-center">
                                <i class="fas fa-trash-alt mr-2"></i>Delete Account Permanently
                            </button>
                            <p class="text-xs text-gray-500 text-center mt-2">
                                <i class="fas fa-info-circle mr-1"></i>This action cannot be undone
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Account Modal -->
    <div id="deleteModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
        <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full p-6">
            <div class="flex items-center mb-4">
                <div class="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mr-4">
                    <i class="fas fa-trash-alt text-red-600 text-2xl"></i>
                </div>
                <div>
                    <h3 class="text-xl font-bold text-gray-800">Delete Account</h3>
                    <p class="text-sm text-gray-500">Permanent action</p>
                </div>
            </div>
            
            <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-4">
                <p class="text-sm text-red-800 font-semibold">
                    <i class="fas fa-exclamation-triangle mr-2"></i>
                    This action CANNOT be undone!
                </p>
            </div>

            <div class="space-y-3 mb-6">
                <h4 class="font-semibold text-gray-700 text-sm">What will be deleted:</h4>
                <ul class="text-sm text-gray-600 space-y-2">
                    <li class="flex items-start">
                        <i class="fas fa-times text-red-500 mr-2 mt-1"></i>
                        <span>Your profile and personal information</span>
                    </li>
                    <li class="flex items-start">
                        <i class="fas fa-times text-red-500 mr-2 mt-1"></i>
                        <span>All rides and booking history</span>
                    </li>
                    <li class="flex items-start">
                        <i class="fas fa-times text-red-500 mr-2 mt-1"></i>
                        <span>Reviews and ratings</span>
                    </li>
                    <li class="flex items-start">
                        <i class="fas fa-times text-red-500 mr-2 mt-1"></i>
                        <span>Chat messages and notifications</span>
                    </li>
                </ul>
            </div>

            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2">
                    Type <strong>DELETE</strong> to confirm:
                </label>
                <input type="text" id="deleteConfirmText" 
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500"
                    placeholder="Type DELETE here">
            </div>

            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2">
                    Why are you leaving? (Optional)
                </label>
                <select id="deleteReason" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500">
                    <option value="">Select a reason...</option>
                    <option value="found_alternative">Found an alternative</option>
                    <option value="bad_experience">Bad experience</option>
                    <option value="privacy_concerns">Privacy concerns</option>
                    <option value="not_safe">Safety concerns</option>
                    <option value="other">Other reason</option>
                </select>
            </div>

            <div class="flex space-x-3">
                <button id="cancelDelete" class="flex-1 px-4 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition font-semibold">
                    Cancel
                </button>
                <button id="confirmDelete" class="flex-1 px-4 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition font-semibold disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                    Delete Forever
                </button>
            </div>
        </div>
    </div>

    <script>
        // Profile photo upload handling
        document.getElementById('uploadPhotoBtn')?.addEventListener('click', () => {
            document.getElementById('profilePhotoInput').click();
        });

        document.getElementById('profilePhotoInput')?.addEventListener('change', async (e) => {
            const file = e.target.files[0];
            if (!file) return;

            // Preview the image
            const reader = new FileReader();
            reader.onload = (e) => {
                document.getElementById('profilePhotoPreview').src = e.target.result;
            };
            reader.readAsDataURL(file);

            // Upload the photo
            const formData = new FormData();
            formData.append('profilePhoto', file);

            try {
                const response = await fetch('/api/users/profile', {
                    method: 'PUT',
                    body: formData
                });

                const result = await response.json();
                if (result.success) {
                    LANEApp.showAlert('Profile photo updated successfully', 'success');
                } else {
                    throw new Error(result.message || 'Failed to update photo');
                }
            } catch (error) {
                LANEApp.showAlert('Failed to update profile photo: ' + error.message, 'error');
                // Revert preview on error
                location.reload();
            }
        });

        // Address Autocomplete functionality
        const addressInput = document.getElementById('addressInput');
        const addressData = document.getElementById('addressData');
        const addressSuggestions = document.getElementById('addressSuggestions');
        let addressDebounceTimer;

        if (addressInput) {
            // Fetch location suggestions
            const fetchAddressSuggestions = async (query) => {
                if (!query || query.length < 3) {
                    addressSuggestions.classList.add('hidden');
                    return;
                }

                try {
                    const response = await fetch(
                        `https://nominatim.openstreetmap.org/search?` +
                        `format=json&q=${encodeURIComponent(query)}&` +
                        `countrycodes=in&limit=8&addressdetails=1`,
                        {
                            headers: {
                                'User-Agent': 'LANE-Carpool-App'
                            }
                        }
                    );

                    const results = await response.json();
                    displayAddressSuggestions(results);
                } catch (error) {
                    console.error('Error fetching address suggestions:', error);
                    addressSuggestions.innerHTML = '<div class="p-3 text-red-500 text-sm"><i class="fas fa-exclamation-circle mr-2"></i>Unable to load suggestions</div>';
                    addressSuggestions.classList.remove('hidden');
                }
            };

            // Display address suggestions
            const displayAddressSuggestions = (results) => {
                if (results.length === 0) {
                    addressSuggestions.innerHTML = '<div class="p-3 text-gray-500 text-sm"><i class="fas fa-info-circle mr-2"></i>No locations found</div>';
                    addressSuggestions.classList.remove('hidden');
                    return;
                }

                addressSuggestions.innerHTML = results.map(result => {
                    const displayName = result.display_name;
                    const address = result.address || {};
                    const icon = address.city ? 'fas fa-city' : address.town ? 'fas fa-building' : address.village ? 'fas fa-home' : 'fas fa-map-marker-alt';
                    
                    return `
                        <div class="address-suggestion-item p-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100 last:border-b-0 transition"
                             data-display="${displayName}"
                             data-street="${address.road || address.neighbourhood || ''}"
                             data-city="${address.city || address.town || address.village || ''}"
                             data-state="${address.state || ''}"
                             data-zipcode="${address.postcode || ''}"
                             data-country="${address.country || 'India'}">
                            <div class="flex items-start">
                                <i class="${icon} text-primary mr-3 mt-1"></i>
                                <div class="flex-1">
                                    <div class="font-medium text-gray-800 text-sm">${address.city || address.town || address.village || result.name || 'Location'}</div>
                                    <div class="text-xs text-gray-500 mt-0.5">${displayName}</div>
                                </div>
                            </div>
                        </div>
                    `;
                }).join('');

                addressSuggestions.classList.remove('hidden');

                // Add click handlers
                addressSuggestions.querySelectorAll('.address-suggestion-item').forEach(item => {
                    item.addEventListener('click', () => {
                        const displayName = item.dataset.display;
                        const street = item.dataset.street;
                        const city = item.dataset.city;
                        const state = item.dataset.state;
                        const zipcode = item.dataset.zipcode;
                        const country = item.dataset.country;

                        addressInput.value = displayName;

                        // Store structured address data
                        const structuredAddress = {
                            street: street || displayName.split(',')[0],
                            city: city,
                            state: state,
                            zipCode: zipcode,
                            country: country
                        };
                        
                        addressData.value = JSON.stringify(structuredAddress);
                        addressSuggestions.classList.add('hidden');
                    });
                });
            };

            // Input event listener with debounce
            addressInput.addEventListener('input', (e) => {
                clearTimeout(addressDebounceTimer);
                const query = e.target.value.trim();

                if (query.length < 3) {
                    addressSuggestions.classList.add('hidden');
                    addressData.value = '';
                    return;
                }

                addressDebounceTimer = setTimeout(() => {
                    fetchAddressSuggestions(query);
                }, 300);
            });

            // Hide suggestions when clicking outside
            document.addEventListener('click', (e) => {
                if (!addressInput.contains(e.target) && !addressSuggestions.contains(e.target)) {
                    addressSuggestions.classList.add('hidden');
                }
            });
        }

        // Profile form submission with better error handling
        document.getElementById('profileForm')?.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);
            const data = Object.fromEntries(formData);

            // Parse address if it exists
            if (addressData && addressData.value) {
                try {
                    data.address = JSON.parse(addressData.value);
                } catch (e) {
                    // If parsing fails, keep as string
                    data.address = addressInput.value;
                }
            } else if (addressInput && addressInput.value) {
                // If no structured data but has input, save as string
                data.address = addressInput.value;
            }

            // Remove the addressDisplay field as it's just for UI
            delete data.addressDisplay;

            // Remove empty fields to avoid validation errors
            Object.keys(data).forEach(key => {
                if (data[key] === '' || data[key] === null || data[key] === undefined) {
                    delete data[key];
                }
            });

            try {
                const response = await fetch('/api/users/profile', {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ profile: data })
                });

                const result = await response.json();
                
                if (result.success) {
                    LANEApp.showAlert('✅ Profile updated successfully!', 'success');
                    // Reload after a short delay to show updated data
                    setTimeout(() => location.reload(), 1500);
                } else {
                    // Display user-friendly error message
                    const errorMsg = result.message || 'Unable to update profile';
                    LANEApp.showAlert(errorMsg, 'error');
                }
            } catch (error) {
                // Handle network or parsing errors
                console.error('Profile update error:', error);
                
                let userFriendlyMsg = '❌ Unable to update profile. ';
                
                if (error.name === 'SyntaxError') {
                    userFriendlyMsg += 'There was a problem processing your data. Please try again.';
                } else if (!navigator.onLine) {
                    userFriendlyMsg += 'Please check your internet connection.';
                } else {
                    userFriendlyMsg += 'Please try again or contact support if the problem persists.';
                }
                
                LANEApp.showAlert(userFriendlyMsg, 'error');
            }
        });

        // ============================================
        // DELETE ACCOUNT FUNCTIONALITY
        // ============================================
        const deleteAccountBtn = document.getElementById('deleteAccountBtn');
        const deleteModal = document.getElementById('deleteModal');
        const cancelDelete = document.getElementById('cancelDelete');
        const confirmDelete = document.getElementById('confirmDelete');
        const deleteConfirmText = document.getElementById('deleteConfirmText');
        const deleteReason = document.getElementById('deleteReason');

        deleteAccountBtn?.addEventListener('click', () => {
            deleteModal.classList.remove('hidden');
        });

        cancelDelete?.addEventListener('click', () => {
            deleteModal.classList.add('hidden');
            deleteConfirmText.value = '';
            deleteReason.value = '';
            confirmDelete.disabled = true;
        });

        // Enable delete button only when user types DELETE
        deleteConfirmText?.addEventListener('input', (e) => {
            confirmDelete.disabled = e.target.value.trim() !== 'DELETE';
        });

        confirmDelete?.addEventListener('click', async () => {
            const reason = deleteReason.value;
            
            if (deleteConfirmText.value !== 'DELETE') {
                LANEApp.showAlert('⚠️ Please type DELETE to confirm', 'warning');
                return;
            }

            try {
                const response = await fetch('/api/users/account', {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ reason })
                });

                const result = await response.json();

                if (result.success) {
                    LANEApp.showAlert('✅ Account deleted successfully. We\'re sorry to see you go.', 'success');
                    setTimeout(() => {
                        window.location.href = result.redirectUrl || '/';
                    }, 2000);
                } else {
                    LANEApp.showAlert(result.message || 'Failed to delete account', 'error');
                }
            } catch (error) {
                console.error('Delete error:', error);
                LANEApp.showAlert('❌ Unable to delete account. Please try again.', 'error');
            }
        });

        // Close modal when clicking outside
        deleteModal?.addEventListener('click', (e) => {
            if (e.target === deleteModal) {
                deleteModal.classList.add('hidden');
            }
        });
    </script>

    <%- include('../partials/footer') %>